[{"content":"Today marks my 4 years at trivago.\nWhen I started, I expected to learn a lot technically compared to my previous jobs, especially since trivago operates on a much larger scale. But things were different than what I expected.\nIn my previous job, I was wearing multiple hats. Even though I was a Backend Engineer, I also made basic dashboards for internal customers and occasionally wrote some JS and CSS for the front end. I had to take care of some of our infrastructure as well.\nAt trivago, I noticed that engineers tend to focus on specific areas. Backend Engineers stick to the backend, and Frontend Engineers to the frontend. Test Engineers have a clear structure, working with multiple product teams. Transitioning from a \u0026ldquo;jack of many trades\u0026rdquo; environment to a \u0026ldquo;master of some trades\u0026rdquo; environment felt slow at first. My previous job was in a startup environment, and we had to move very fast with the constantly changing market, and learning was intense. I wasn’t sure if I’d enjoy a comparatively slower pace at trivago.\nIn the beginning, I learned the importance of clear communication, staying organized, and utilizing time properly, especially in meetings. However, my technical learning slowed down significantly. Many tasks around Kubernetes and cloud computing were already familiar, so I wasn’t challenged much. This put me in my comfort zone. Because of my background, coming from a very busy culture, I tend to become disorganized naturally. But I realized that when I became more disciplined and organized, I accomplished more in less time, with fewer errors and less stress.\nI was working as an embedded SRE in the MARS (Marketing Solutions) team from where I learned those important skills. After 2 years, I moved to the central SRE group, which changed the course of my journey. I began to see a broader view of our organization and tech in general. Started working with various product backend teams. Now I see interesting technical challenges every day with many unknowns. But because of the soft skills I learned earlier, I don’t feel overwhelmed. I know any problems can be solved by researching a bit, and reaching out to the right contacts. Fortunately, the SRE group is full of talented colleagues, so learning anything technical is easy. There’s always a good explanation and solution in the SRE community.\nI realized that acquiring soft skills is often more important than technical skills. So I preach this to my friends and acquaintances.\nI meet new people through table tennis, events, and parties, or by staying longer in the social space in our office on Fridays, and try to maintain good relationships. By doing this, I made some great friends! Knowing people from outside my team makes it easier when we need to collaborate on work-related topics. Working with people from different teams is now easier than ever.\nLooking back, I want to thank all my colleagues for everything I’ve learned. And I look forward to learning more in the years ahead. Insha\u0026rsquo;Allah!\nOriginally published on LinkedIn\n","permalink":"https://aniskhan001.me/life/lookback-at-my-4-years-at-trivago/","summary":"\u003cp\u003eToday marks my 4 years at trivago.\u003c/p\u003e\n\u003cp\u003eWhen I started, I expected to learn a lot technically compared to my previous jobs, especially since trivago operates on a much larger scale. But things were different than what I expected.\u003c/p\u003e\n\u003cp\u003eIn my previous job, I was wearing multiple hats. Even though I was a Backend Engineer, I also made basic dashboards for internal customers and occasionally wrote some JS and CSS for the front end. I had to take care of some of our infrastructure as well.\u003c/p\u003e","title":"Lookback at my 4 years at trivago"},{"content":"“DevOps Engineer হতে গেলে প্রোগ্রামিং/কোডিং জানা লাগে না।”\nএই ধারণাটা ইদানীং শুনতে পাচ্ছি মাঝে মাঝে। শেষ গত সপ্তাহেও সরাসরি আবার একটা প্রশ্ন পেলাম এরকম, \u0026ldquo;ভাই আমার কোডিং/প্রোগ্রামিং করতে ভাল লাগে না। কিন্তু শুনেছি DevOps হতে গেলে এইসব কিছু লাগে না। আমাকে সাজেশন দেন কিভাবে DevOps Engineer হতে পারব।\u0026rdquo; তার প্রতি আমার প্রথম সাজেশন ছিল, \u0026ldquo;যে কোন একটা প্রোগ্রামিং ল্যাঙ্গুয়েজ ব্যাসিক শিখে আসেন, তারপর বাকি সাজেশন দিব।\u0026rdquo; :)\nপ্রথমেই বলে নেই, \u0026ldquo;DevOps\u0026rdquo; শব্দটা গত এক-দেড় দশকের অনেক ট্রেন্ডি ও মতভেদে খুব ‘ক্যুল’ একটা বিষয়। এবং আমার কাছে মনে হয় বিগত কয়েক বছরে টেক জগতে সবচেয়ে বেশী ভুল ধারণার বিস্তার হয়েছে এমন কয়েকটা বিষয়ের মধ্যে DevOps খুবই উপরের সারির একটা টপিক। অনেকদিন ইন্ডাস্ট্রিতে কাজ করেও অনেক রকমের বিতর্কিত ধারণা পোষণ করা সম্ভব। এই যেমন অনেকেই মনে করেন, \u0026ldquo;DevOps Engineer কোন জব রোল/টাইটেল হতে পারে না\u0026rdquo;। যেটা আমি ব্যক্তিগতভাবে মোটামোটি সমর্থন করি। কারণ DevOps হচ্ছে এক ধরনের মাইন্ডসেট বা কালচার। কালচার নিয়ে ইঞ্জিনিয়ারিং করার কিছু নেই। এটা অনুশীলন করতে হলে অন্য কিছু ইঞ্জিনিয়ারিং প্র্যাকটিস অনুসরণ করতে হবে, সফটওয়্যার ইঞ্জিনিয়ারিং প্র্যাকটিস অনেকগুলো প্র্যাকটিসের মধ্যে একটা। তবে দিন শেষে সেই মাইন্ডসেটে কাজ ঠিকঠাক ভাবে হলে রোল নিয়ে তেমন মাতামাতি করার কিছু নাই বলেও আমি বিশ্বাস করি। যাই হোক, এই ধারণা নিয়ে অনেক বিতর্ক আছে এবং আলোচনা করতে গেলে অনেক বড় পোস্ট লেখা যাবে। কিন্তু… “DevOps Engineer হতে গেলে প্রোগ্রামিং/কোডিং জানা লাগে না” এই ধারণা অনেক বড় ভুল বলে আমি মনে করি। যেটা ইদানীংকালে অনেক ভার্সিটি পড়ুয়া তরুণদের মধ্যে বিরাজ করছে। কেউ যাতে শুরুর দিকেই পথভ্রষ্ট না হয়ে যায়, সেটা চিন্তা করে ভাবলাম DevOps নিয়ে ইন্ডাস্ট্রিতে কাজ করে আমার যতটুকু ধারণা হয়েছে সেইটা সবার সাথে শেয়ার করি।\nDevOps টার্মটা প্রথম আলোচনায় আসে ২০০৭-২০০৮ এর দিকে। সেই সময়কার আগ পর্যন্ত মাঝারি থেকে বড় কোম্পানিগুলোতে নতুন সফটওয়্যারে কাজ শেষ হলে অথবা চলমান সফটওয়্যারে নতুন ফিচারের কাজ সম্পন্ন হলে সেই পরিবর্তন সার্ভারে আপলোড বা ডেপ্লয় করার জন্য আলাদা IT specialist মানুষ থাকত। যাদেরকে সাধারণত সিস্টেম/অপারেশন ইঞ্জিনিয়ার বা সংক্ষেপে Ops বলা হত। যাদের প্রোগ্রামিং না জানা থাকলেও চলত। তারা মুলত লিনাক্স/ইউনিক্স অথবা অন্যান্য অপারেটিং সিস্টেম সম্পর্কে ভাল ধারণা রাখত এবং কমান্ড লাইন ইন্টারফেসে সাবলীলভাবে কাজ করতে পারত। নতুন সফটওয়্যার ডেপ্লয় দেয়ার সময় সফটওয়্যার ডেভেলপার আর অপারেশন পার্সনদের সাথে এক রকমের দ্বন্দ্ব চলত। কারণ স্বাভাবিকভাবেই সফটওয়্যার ডেভেলপার নতুন একটা কাজ শেষ করলে সে চাইবে তার করা নতুন কাজটা যেন খুব দ্রুত প্রোডাকশন সিস্টেমে চলে যায়। নিজের কাজ করা সফটওয়্যার কাস্টমাররা ব্যবহার করা শুরু করলে একটা আনন্দদায়ক অনুভূতি আসে। এবং আগের কাজ প্রোডাকশন সিস্টেমে না যাওয়া পর্যন্ত নতুন কাজ শুরু করার জন্য অপেক্ষা করা লাগত। অন্যদিকে, অপারেশন পার্সনদের দায়িত্ব ছিল পুরো সিস্টেম যাতে সব সময় সচল থাকে। তাই নতুন একটা পরিবর্তন ডেপ্লয় দিতে গেলে তারা অনেক সতর্ক থাকত বা সহজে ডেপ্লয় দিতে চাইত না। কারণ সফটওয়্যার ডেভেলপারদের কাজ করা পরিবর্তনে যদি নতুন কোন সমস্যা আসে তাহলে অপ্স পার্সনকেই সব হ্যান্ডল করতে হবে, যেহেতু সার্ভারের দায়িত্ব তাদের হাতে। এদিকে নতুন সমস্যা আসবে নাকি আসবে না সেই ব্যাপারে অপ্স পার্সনের কোন ধারণাই নেই, কারণ কোড তো লিখেছে সফটওয়্যার ডেভেলপার। নিরাপত্তার কথা ভেবে আবার সফটওয়্যার ডেভেলপারদের কাছে সার্ভারের অ্যাক্সেস থাকত না, তাই তারা সহজে জানতে পারতো না কোথায় সমস্যা আর কি সমাধান করতে হবে। ফলে দুই পক্ষের মধ্যে এক রকমের সংঘর্ষ লেগেই থাকত। সফটওয়্যারের অজানা সমস্যা দ্রুত খোঁজার জন্য, দুই পক্ষের দ্বন্দ্ব আর নির্ভরতা দূর করার জন্যই আসলে DevOps টার্মের জন্ম। এখানে Development and Operations কে সংক্ষেপে DevOps বলা হয়।\nDevOps এর কয়েকটা নীতির মধ্যে একটা হচ্ছে \u0026ldquo;সহযোগিতা\u0026rdquo;। এক পক্ষ কাজ শেষ করে যাতে বলতে না পারে, “আমার কাজ শেষ, এইবার তোমারটা তুমি সামলাও“। এই ধরনের অবস্থা দূর করার জন্য DevOps মাইন্ডসেট অনুশীলন করা যায়। যিনি সিস্টেম নিয়ে কাজ করছেন যে যদি ডেপ্লয়মেন্ট প্রসেসটা অটোমেট করতে পারে, যাতে সফটওয়্যার ইঞ্জিনিয়ারদের কাজ শেষ হলে কিছু ইভেন্ট এর উপর ভর করে ডেপ্লয়মেন্টটা যাতে অটোমেটিক হয়ে যায়। এই \u0026ldquo;অটোমেশন\u0026rdquo; হচ্ছে DevOps এর আরেকটা নীতি। যে সব কাজ বারবার একই ধাপে করতে হয় সেটা করার জন্য যাতে কোন ব্যাক্তির উপর নির্ভর করা না লাগে। যত সম্ভব অটোমেশন করতে হবে, আর এই অটোমেশন করতে গেলে কোডিং দক্ষতা লাগবেই। এই রোলে যিনি কাজ করছেন তার আরো দায়িত্ব হচ্ছে সফটওয়্যার ডেভেলপারদের তাদের প্রোজেক্টের সম্পূর্ণ স্বত্ব গ্রহণ করতে সাহায্য করা। পুরো সিস্টেমকে নিরাপদ রেখে সমস্ত লগ, ইভেন্ট ও অন্যান্য আচরণ যেন ডেভেলপাররা দেখতে পায় সেটা অটোমেশন করে তাদেরকে সহযোগিতা করা। যাতে যে কোন বাগ/সমস্যা হলে ডেভেলপাররা কোন অপ্স পার্সনের উপর নির্ভর না করেই নিজেরা সমস্যা চিহ্নিত করতে পারে। সমস্যা খুঁজে পেলে এবং ফিক্স করা হলে অটোমেটেড সেই ইভেন্ট এর উপর ভর করে আবার প্রোডাকশন সিস্টেমে সমাধান চলে যাবে। এই সমস্ত সত্ত্ব ডেভেলপারদের দিতে গেলে, অথবা পুরো পাইপলাইনটা অটোমেট করতে গেলে সেই কাজগুলো একজন DevOps/SRE/Platform Engineer অবশ্যই সেটা কোডিং এর মাধ্যমে সম্পাদন করবে। এছাড়া সমস্ত সিস্টেমের বর্তমান অবস্থা, পরিবর্তন ইত্যাদি সংরক্ষণ করার জন্যও কোডিং করা লাগে যেটা IaC (Infrascture as Code) নামে পরিচিত।\nDevOps মাইন্ডসেট শুধুমাত্র Developer আর Operation পার্সনদের মধ্যেই সীমাবদ্ধ নয়। বরং এটা টীম/কোম্পানির সকলের মধ্যে থাকা উচিৎ। বর্তমান সময়ে QA ইঞ্জিনিয়ারদের সাথেও ডেভেলপারদের দ্বন্দ্ব দেখা যায়। অনেক সময় টেস্ট টীম কিছু বাগ পায় যার কারণে রিলিজ আটকে যায়। বাগ পাওয়ার পর সেটা যদি অটোমেটেডভাবে ডিটেক্ট করার সিস্টেম বানানো যায় অথবা টেস্ট ফাংশন লেখা যায় তাহলে কিন্তু পরবর্তীতে একই বাগ/সমস্যা খোঁজার জন্য অনেকগুলো মানুষের ঘণ্টার পর ঘণ্টা ব্যয় করা লাগে না। QA পার্সন যারা আছে তারাও চাইলে কোডিং/প্রোগ্রামিং ব্যবহার করে টেস্ট লিখে ডেভেলপমেন্ট টীমকে সহযোগিতা করতে পারে, যাতে দ্রুত বাগ ধরা পরে। কয়টা বাগ/সমস্যা ধরতে পারলাম QA ইঞ্জিনিয়ারদের সেটা লক্ষ্য না হয়ে লক্ষ্য হওয়া উচিৎ কিভাবে আমরা প্রোডাক্টের ডেভেলপমেন্টে ডেভেলপারসহ অন্যান্য সবাইকে সহযোগিতা করতে পারি। এটাই কিন্তু DevOps মাইন্ডসেট বা কালচার। এবং এটা অনুশীলন করে সহজেই উল্লেখিত সেই দ্বন্দ্ব দূর করা সম্ভব। সোজা কথায় মুল ফোকাস থাকা উচিৎ একে অন্যকে সহযোগিতার মাধ্যমে সবার কাজের ফলে এন্ড কাস্টমার চূড়ান্তভাবে লাভ পাচ্ছে কিনা। কাস্টমার সেন্ট্রিক এই মনোভাব রাখা DevOps এর আরেকটা মুল নীতি। ঠিক একই মাইন্ডসেট অনুশীলন করে প্রোডাক্ট ম্যানেজার আর ডেভেলপমেন্ট টিমের চিরায়িত সেই দ্বন্দ্বও খুব সহজে দূর করা সম্ভব।\nএকটা কোম্পানিতে DevOps শুধুমাত্র ১-২ জন মানুষ, অথবা একটা টীমই না। DevOps মানে হচ্ছে একটা কালচার, যেটা কোম্পানির সবাই অনুশীলন করে একে অন্যকে সহযোগিতা করবে। বারবার করা লাগে এমন কাজ যার যার রোলে থেকে সে সে অটোমেট করবে। ফীডব্যাক ও টীম কমিউনিকেশনে উন্নতি করে প্রোডাক্ট ডেভেলপমেন্ট লাইফসাইকেল কমিয়ে আনবে। যাতে চূড়ান্তভাবে সেই প্রোডাক্টের কাস্টমাররা লাভবান হয়। কাস্টমার-সেন্ট্রিক এই চিন্তা মাথায় রেখে কাজ করা প্রোডাক্ট ম্যনেজার একজন DevOps। কাস্টমার-সেন্ট্রিক এই চিন্তা মাথায় রেখে কাজ করা টেস্ট ইঞ্জিনিয়ারও একজন DevOps। কাস্টমার-সেন্ট্রিক এই চিন্তা মাথায় রেখে কাজ করা একজন সফটওয়্যার ডেভেলপারও DevOps। কাস্টমার-সেন্ট্রিক এই চিন্তা মাথায় রেখে যিনি সার্ভার ও ইনফ্রাস্ট্রাকচার নিয়ে কাজ করেন, তিনিও DevOps। এখানে \u0026ldquo;DevOps\u0026rdquo; বলতে \u0026ldquo;DevOps অনুশীলনকারী\u0026rdquo; বুঝিয়েছি।\nআশা করি DevOps সম্পর্কে আমি কি ধারণা পোষণ করি সেটা বুঝাতে পেরেছি। এই DevOps কালচার/মাইন্ডসেট অনুশীলন করতে পারলে অনেক গতানুগতিক সমস্যা সমাধান করা সম্ভব। এবং প্রাসঙ্গিক কোন রোলে (DevOps/SRE/Platform Engineer) কাজ করতে গেলে কোডিং এর বিকল্প নেই। আমার ব্যক্তিগত পরামর্শ হবে আগে ব্যাক-এন্ড সিস্টেমের সাথে অন্তত ২-১ বছর কাজ করা। তাহলে ওয়েব অ্যাপ্লিকেশন, নেটওয়ার্ক, সিস্টেম আর্কিটেকচার সম্পর্কে ভাল ধারণা হবে। এর পরে DevOps প্রাসঙ্গিক কোন জবে কাজ করতে গেলে সফটওয়্যার ডেভেলপমেন্ট টীমকে খুব ভাল সাপোর্ট দেয়া যাবে। আর যারা অপারেটিং সিস্টেম কিভাবে কাজ করে এই সম্পর্কে ব্যাসিক ধারণা রাখে আর কমান্ড লাইন ইন্টারফেসে কাজ করতে পারে তাদের জন্য প্রোগ্রামিং শিখা খুব সহজ ব্যাপার। তাই প্রোগ্রামিং না শিখে নিজেকে পিছনে ফেলে রেখে লাভ কি?\nপ্রোগ্রামিং না শিখে যদি কেউ DevOps ইঞ্জিনিয়ার হতে চায় তাহলে বুঝতে হবে তারা ১৫ বছর আগের সেই Ops রোলটা নিতে চাচ্ছে, যেখানে সব সময় একটা দ্বন্দ্ব বিরাজ করত। তবে সত্যি কথা বলতে যেই কোম্পানিগুলো DevOps টার্ম সম্পর্কে ভাল ধারণা রাখে তারা ১৫ বছর পিছনে গিয়ে প্রোগ্রামিং না জানা কাউকে এই সম্পর্কিত রোলের জন্য হায়ার করবে না। অনেক টিউটোরিয়াল ইদানীং বের হচ্ছে.. যেখানে শুধুমাত্র ডকার, কুবারনেটিস, CI/CD ব্যাসিক নিয়ে ধারণা দিয়েই DevOps Engineer বানিয়ে দেয়ার স্বপ্ন দেখানো হয়। কিছু কোম্পানি হয়ত এরকম রোল অফারও করতে পারে যেখানে ক্যান্ডিডেটের প্রোগ্রামিং জ্ঞান না থাকলেও চলবে। এরকম প্রচুর কোম্পানিতে অল্প কয়েক মাসের কাজের অভিজ্ঞতাতেই \u0026ldquo;সিনিয়র\u0026rdquo; টাইটেলও দিয়ে দেয়া হয়। তাই আপনাকে সিদ্ধান্ত নিতে হবে আপনার কি এমন লোভনীয় \u0026ldquo;DevOps Engineer\u0026rdquo; রোল বা টাইটেল দরকার? নাকি ভাল, শক্ত, মজবুত ও ফিউচার-প্রুফ একটা ক্যারিয়ার দরকার?\nবর্তমানে সহজ কন্টেন্ট ক্রিয়েশনের যুগে অনেকেই কন্টেন্ট বানিয়ে প্রচুর নবীনকে পথভ্রষ্ট করছে। এটা ভবিষ্যৎ প্রজন্মের জন্য চরম দুঃখজনক ও হতাশাজনক ব্যাপার। কারো যে কোন ব্যাপারে দ্বিমত থাকলে কমেন্টে লিখতে পারেন, আলোচনা করা যাবে। আর আমার এই ধারণার সাথে সমর্থন থাকলে লেখাটা শেয়ার করে নতুন যারা এই জগতে আসতে চাচ্ছে তাদের উপকার করতে পারেন।\n","permalink":"https://aniskhan001.me/tech/devops-vs-programming/","summary":"\u003cp\u003e“DevOps Engineer হতে গেলে প্রোগ্রামিং/কোডিং জানা লাগে না।”\u003c/p\u003e\n\u003cp\u003eএই ধারণাটা ইদানীং শুনতে পাচ্ছি মাঝে মাঝে। শেষ গত সপ্তাহেও সরাসরি আবার একটা প্রশ্ন পেলাম এরকম, \u0026ldquo;ভাই আমার কোডিং/প্রোগ্রামিং করতে ভাল লাগে না। কিন্তু শুনেছি DevOps হতে গেলে এইসব কিছু লাগে না। আমাকে সাজেশন দেন কিভাবে DevOps Engineer হতে পারব।\u0026rdquo; তার প্রতি আমার প্রথম সাজেশন ছিল, \u0026ldquo;যে কোন একটা প্রোগ্রামিং ল্যাঙ্গুয়েজ ব্যাসিক শিখে আসেন, তারপর বাকি সাজেশন দিব।\u0026rdquo; :)\u003c/p\u003e\n\u003cp\u003eপ্রথমেই বলে নেই, \u0026ldquo;DevOps\u0026rdquo; শব্দটা গত এক-দেড় দশকের অনেক ট্রেন্ডি ও মতভেদে খুব ‘ক্যুল’ একটা বিষয়। এবং আমার কাছে মনে হয় বিগত কয়েক বছরে টেক জগতে সবচেয়ে বেশী ভুল ধারণার বিস্তার হয়েছে এমন কয়েকটা বিষয়ের মধ্যে DevOps খুবই উপরের সারির একটা টপিক। অনেকদিন ইন্ডাস্ট্রিতে কাজ করেও অনেক রকমের বিতর্কিত ধারণা পোষণ করা সম্ভব। এই যেমন অনেকেই মনে করেন, \u0026ldquo;DevOps Engineer কোন জব রোল/টাইটেল হতে পারে না\u0026rdquo;। যেটা আমি ব্যক্তিগতভাবে মোটামোটি সমর্থন করি। কারণ DevOps হচ্ছে এক ধরনের মাইন্ডসেট বা কালচার। কালচার নিয়ে ইঞ্জিনিয়ারিং করার কিছু নেই। এটা অনুশীলন করতে হলে অন্য কিছু ইঞ্জিনিয়ারিং প্র্যাকটিস অনুসরণ করতে হবে, সফটওয়্যার ইঞ্জিনিয়ারিং প্র্যাকটিস অনেকগুলো প্র্যাকটিসের মধ্যে একটা। তবে দিন শেষে সেই মাইন্ডসেটে কাজ ঠিকঠাক ভাবে হলে রোল নিয়ে তেমন মাতামাতি করার কিছু নাই বলেও আমি বিশ্বাস করি। যাই হোক, এই ধারণা নিয়ে অনেক বিতর্ক আছে এবং আলোচনা করতে গেলে অনেক বড় পোস্ট লেখা যাবে। কিন্তু… “DevOps Engineer হতে গেলে প্রোগ্রামিং/কোডিং জানা লাগে না” এই ধারণা অনেক বড় ভুল বলে আমি মনে করি। যেটা ইদানীংকালে অনেক ভার্সিটি পড়ুয়া তরুণদের মধ্যে বিরাজ করছে। কেউ যাতে শুরুর দিকেই পথভ্রষ্ট না হয়ে যায়, সেটা চিন্তা করে ভাবলাম DevOps নিয়ে ইন্ডাস্ট্রিতে কাজ করে আমার যতটুকু ধারণা হয়েছে সেইটা সবার সাথে শেয়ার করি।\u003c/p\u003e","title":"DevOps vs Programming 🤔"},{"content":"অনেকগুলো সফট স্কিলের মধ্যে আজ ৩টা খুব গুরুত্বপূর্ণ প্রশ্ন নিয়ে কথা বলব। প্রশ্ন ৩টা হচ্ছেঃ\nTell me about yourself Why did you apply for this company? Do you have any questions for us? trivago তে ইন্টারভিউ দেয়ার সময় এই প্রশ্নগুলোর উত্তর আমি কিভাবে দিয়েছিলাম সেটাও শেয়ার করবো।\nTell me about yourself - আপনার সম্পর্কে কিছু বলুন এই প্রশ্নটা খুব সহজ প্রশ্ন হলেও উত্তরটা মাঝে মাঝে খুব কঠিন হয়ে যায়। নিজের সম্পর্কে কিছু জানতে চাওয়া হলে অনেকেই আগে কি কি করছেন এবং বর্তমানে কর্মক্ষেত্রে কি কি নিয়ে কাজ করছেন সেটা বলা শুরু করেন। কিন্তু আমার মনে হয়ে এটা একটা ভুল এপ্রোচ। কারণ আপনি যা যা করেছেন বা এখন যা যা করেছেন তা আপনার সিভি/রেজুমে তে অলরেডি দেয়া আছে। তাই ২-৫ মিনিট সময় ব্যয় করে এই তথ্যগুলো পুনরায় না দেয়াই ভাল। আমাকে এই প্রশ্ন করলে আমার উত্তর হবেঃ\nI’m a very calm person. I can stay calm during the toughest situation of life. It helps me to focus on the problems that needs solution quickly.\nএই বাক্যটার মাধ্যমে আমি আমার পার্সোনাল একটা অ্যাট্রিবিউট তুলে ধরার চেষ্টা করেছি। যে আমি একজন শান্ত স্বভাবের মানুষ এবং শান্ত থাকার কারণে এটা কিভাবে আমাকে প্রফেশনাল লাইফে প্রবলেম সল্ভ করতে সাহায্য করে। এই তথ্যটা সাধারণত আপনি আপনার সিভি বা রেজুমেতে তুলে ধরতে পারবেন না। কিন্তু ইন্টারভিউতে এই তথ্যটা দিলে ইন্টারভিউয়ার আপনার সম্পর্কে নতুন কিছু জানতে পারবে। পার্সোনাল অ্যাট্রিবিউট শেয়ার করার পরে আমি একটা গল্পও শেয়ার করি। কেন আমি শান্ত থাকার কারণে দ্রুত প্রবলেম সল্ভ করতে পারি। গল্পটা এমনঃ\nএকদিন অফিসে হঠাৎ করে পিক আওয়ারে ম্যাপ সিস্টেম ডাউন হয়ে যায়। সিস্টেম ডাউন থাকার কারণে আমরা অনেকগুলো অর্ডার মিস করি। যেহেতু পিক আওয়ারে অর্ডার আসছে না, অনেকেই মোটামুটি প্যানিক শুরু করে দেয়। কিন্তু যেহেতু আমি ঠাণ্ডা মাথায় ছিলাম, আমি দ্রুত চিন্তা করতে পেরেছি সমস্যাটা কোথায় হতে পারে। পরে একটু ডিবাগ করে দেখলাম ড্যাটাবেজে একটা টেবিলের কলামে ভুল টাইপের ড্যাটা পুশ করা হয়েছে, যার কারণে অ্যাপ্লিকেশন কাজ করছে না। তাই আমি তাড়াতাড়ি ড্যাটা টাইপটা ফিক্স করলাম, এবং তার কারণে সিস্টেমটা আপ এন্ড রানিং হয়ে যায়, আর আমরা অর্ডার পেতে শুরু করি। সিস্টেম আপ হওয়ার পরে সময় নিয়ে একটা ভ্যালিডেশন লেয়ার অ্যাড করে দিয়েছি যাতে এই রকম ভুল টাইপের ড্যাটা আর পুশ না করা যেতে পারে।\nমানুষের জন্য সব সময় গল্প মনে রাখা খুব সহজ। আপনি যখন কোন নির্দিষ্ট তথ্য বা ড্যাটা তাকে দিবেন, সেটা হয়তবা একবার শুনে কেউ মনে রাখতে পারবে না। কিন্তু যখন কোনও অভিজ্ঞতা গল্প আকারে শেয়ার করবেন সেটা ইন্টারভিউয়ার কিছুদিন হলেও মনে রাখবে। কারণ আপনি একটা ইন্টারেস্টিং এবং রেলেভেন্ট অভিজ্ঞতা শেয়ার করেছেন, যা অন্যান্য সকল ক্যান্ডিডেট থেকে আপনাকে আলাদা করে ফেলবে।\nএইভাবে উত্তর দেয়ার টেকনিকটাকে অনেকে STAR মেথড বলে। STAR মানে হচ্ছেঃ Situation ➤ Task ➤ Action ➤ Result\nSituation আমার যখন গল্পটা শেয়ার করি তখন একটা Situation তুলে ধরার চেষ্টা করেছি। ➤ পিক আওয়ারে ম্যাপ সিস্টেম ডাউন হয়ে যায়। এবং সেই কারণে আমরা অনেকগুলো অর্ডার মিস করি।\nTask Situation টার কারণে কিছু Task চলে এসেছে। ➤ সিস্টেম ফিক্স করতে হবে যাতে পুনরায় আমরা অর্ডার নিতে পারি।\nAction Task এর কারণে আমার কিছু Action নেয়া লেগেছে। ➤ ড্যাটা টাইপটা ম্যানুয়ালি ফিক্স করলাম যাতে সিস্টেমে আবার অর্ডার আসা শুরু করে। পরে ভ্যালিডেশন লেয়ার অ্যাড করে দিয়েছি ফিউচার প্রুফিং এর জন্য।\nResult সব শেষ করে একটা Result পেয়েছি। ➤ এক্ষেত্রে আমার Result ছিল কিছু learning! এই রকম সিস্টেম ড্যাটা পুশ করার আগে ভ্যালিডেশন লেয়ার অবশ্যই অ্যাড করতে হবে। সেই সাথে, কোম্পানির বিজনেজ এর কথা চিন্তা করে তৎক্ষণাৎ কিভাবে দ্রুত সিস্টেমটা আপ এন্ড রানিং করা যায় সেটার গুরুত্ব আগে দেয়া। অবশ্যই পরবর্তীতে যাতে অনুরূপ সমস্যার সম্মুখীন হতে না হয় সেভাবে সল্যুশন তৈরি করতে হবে।\nএভাবে বর্ণনা দিলে আপনার সম্পর্কে ইন্টারভিউয়ারের ভাল একটা ধারণা হবে। কারণ আপনি ভুল স্বীকার করতে দ্বিধাবোধ করেন না, এবং ভুল থেকে শিখতে আগ্রহী। এভাবে ভুল করেই সবার শেখা ও অভিজ্ঞতা অর্জন হয়। তাই আমার পরামর্শ হচ্ছে, নিজের যে কোন একটা পার্সোনাল অ্যাট্রিবিউট তুলে ধরে সেই প্রেক্ষিতে কোন অভিজ্ঞতা শেয়ার করা। এভাবে উত্তর দিলে আপনার সাথে অন্য ক্যান্ডিডেটদের তৎক্ষণাৎ একটা পার্থক্য তৈরি হয়ে যাবে।\nWhy did you apply for this company - কেন এই কোম্পানিতে অ্যাপ্লাই করেছেন? এই প্রশ্নের উত্তর দিতে গেলে আমার সবচেয়ে বড় টিপসটা হবে just be honest. অনেকে টিপস দেয় আপনি যেই কোম্পানিতে অ্যাপ্লাই করছেন, তাদের ভাল দিকগুলো কি কি সেগুলো তুলে ধরতে হবে। কিন্তু সমস্যা হচ্ছে আপনি যখন অ্যাপ্লাই করছেন, একজন আউটসাইডার হিসেবে কিন্তু সব তথ্য আপনি কোম্পানি থেকে পাচ্ছেন না। তাই আপনার পক্ষে ভাল দিক গুলো তুলে ধরা একটু কঠিন হয়ে যেতে পারে। এক্ষেত্রে একটা সিক্রেট হচ্ছে, যারা আপনার ইন্টারভিউ নিচ্ছে তারা কিন্তু কোম্পানির মালিক না। সিনিয়র পর্যায়ের কেউ হলে হয়ত বড়জোড় তাদের কিছু স্টক বা শেয়ার থাকতে পারে। দিনশেষে তারাও কিন্তু আপনার মতই কোম্পানির অধীনে কাজ করছে। তাই কোম্পানির গুনগান খুব বেশী একটা না করলেও চলবে।\nআপনি আগে নিজেকে প্রশ্ন করতে পারেনঃ\nআপনি কি ঠিক এই কোম্পানিতে কাজ করার জন্য দেশের বাহিরে যেতে চান? নাকি দেশের বাহিরে যেতে চান বলে একটা কোম্পানিতে চাকরী খুঁজছেন? আগে কি আপনার চাকরী নাকি আগে আপনার লাইফ?\nএই প্রশ্নগুলোর উত্তর পেয়ে গেলে আপনার দক্ষতার সাথে যেই পোস্টে অ্যাপ্লাই করেছেন সেটার সামঞ্জস্য আছে কিনা সেটা তুলে ধরতে পারেন। এবং এই কোম্পানিতে কাজ করার মাধ্যমে আপনি কি কি শিখতে পারবেন, সেটা আপনার ভবিষ্যৎ পরিকল্পনার সাথে খাপ খায় কিনা সেটাও মেনশন করতে পারেন। আর বর্তমান কোম্পানিতে আপনি কি কি মিস করছেন সেটাও তুলে ধরতে পারেন, যেটা হয়ত অন্য কোথাও গেলে পাবেন। সেটা হতে পারে বেতন, ওয়ার্ক কালচার, নতুন কিছু শেখার সুযোগ ইত্যাদি।\nঅবশ্যই আপনার বর্তমান কোম্পানি সম্পর্কে বাজে মন্তব্য করা যাবে না। কারণ আপনি যদি বাজে কোন মন্তব্য করেন তাহলে ব্যাপারটা নেগেটিভ ভাবে নিতে পারে। আপনি এখন যেই কোম্পানিতে আছেন সেখানে অনেক কিছুই আপনার পছন্দ না হতে পারে। যেই ঘাটতিগুলো আপনার বর্তমান কোম্পানিতে আছে সেটা হওয়ার নানা কারণও থাকতে পারে।\nযেমনঃ আপনার বর্তমান পজিশনে পর্যাপ্ত পরিমাণে বেতন পাচ্ছেন না। কিন্তু কোম্পানির স্যালারি স্ট্রাকচার অনুযায়ী আপনার বেতন মানান সই। এইটা পুরোপুরি কোম্পানির দোষ নাও হতে পারে। কারণ তাদের স্ট্রাকচার ছেড়ে আপনাকে আলাদা বেশী বেতন দিবে এটা সচরাচর হয় না। আপনি মেনশন করতে পারেন আপনার জীবন যাপনে যেই পরিমাণে বেতন প্রয়োজন সেটা পাচ্ছেন না, তাই চাকরী পরিবর্তন করতে চাচ্ছেন।\nআবার এমনও হতে পারেঃ আপনি যেভাবে কাজ করতে চাচ্ছেন সেভাবে হচ্ছে না। হতে পারে আপনি বেস্ট প্র্যাকটিস ফলো করে গুছিয়ে কাজ করে কাজ করতে চান। কিন্তু সেটা সম্ভব হচ্ছে না, কারণ কোম্পানি স্টার্টআপ হওয়ায় কারণে বিজনেস রিক্যুয়ারমেন্ট খুব তাড়াতাড়ি পরিবর্তন হয়। এটাও সম্পূর্ণভাবে কোম্পানির দোষ না, কারণ মার্কেটে টিকে থাকতে হলে বিজনেস রিক্যুয়ারমেন্ট তাড়াতাড়ি শিপ করা লাগে। তখন বেস্ট প্র্যাকটিস ফলো করা অনেক সময় কষ্টসাধ্য হয়ে যায়। সেক্ষেত্রে আপনি মেনশন করতে পারেন একটা স্ট্যাবল কোম্পানিতে চাকরী খুঁজছেন যেখানে বেস্ট প্র্যাকটিসগুলো ফলো করে আপনার পছন্দ অনুযায়ী কাজ করতে পারবেন।\nএইভাবে মেনশন করলে কিন্তু কাউকে দোষারোপ করা হচ্ছে না। তবে পরিস্থিতির কারণে আপনার যা যা দরকার সেটা বর্তমান কর্মক্ষেত্রে পাচ্ছেন না। কিন্তু ব্লেমিং করলে সেটা প্রথমেই নেগেটিভ হিসেবে নিতে পারে, এবং খুব ভাল সম্ভাবনা আছে আপনাকে প্রথম স্টেজেই বাদ দিয়ে দিবে।\nঅনেকে বলে, honesty is the best policy! কিন্তু আমার মনে হয় honesty is the ONLY POLICY. Anything other than honesty is just corruption at some point.\nইন্টারভিউতে বিভিন্ন প্রশ্নের গৎবাঁধা উত্তর না দিয়ে একটু রিল্যাক্সভাবে কথা বলতে পারলে ভাল। কারণ আমি, আপনি, ইন্টারভিউয়ার, আমরা সবাই মানুষ। জেনুইনলি আপনি মানুষটা কেমন সেটা যদি ইন্টারভিউতে কিছুটা হলেও ফুটে উঠে তাহলে ইন্টারভিউয়ারদের পক্ষে আপনাকে বাছাই করা খুব সহজ হয়ে যাবে। আপনি যখন ভালভাবে জানেন যে কেন এই কোম্পানিতে অ্যাপ্লাই করছেন, তখন আপনার মাথার ভেতরে কিন্তু পুরো লক্ষ্যটা পরিষ্কার। মাঝে অন্য কোন প্রশ্নে ঘাবড়ে গেলেও ভিতর থেকে যেই উত্তরটা দিতে চাচ্ছেন সেটা খুব সহজেই কোন চিন্তা ছাড়াই দিতে পারবেন। কিন্তু যদি কোন বানানো বা মিথ্যা উত্তর দিতে চান, সেটা যতই প্র্যাকটিস করেন না কেন, ভালভাবে ডেলিভার করতে পারবেন না।\nMy interview journey at trivago trivago তে যখন ইন্টারভিউ দিয়েছিলাম তখন এই প্রশ্নের উত্তরটা আমি কিভাবে দিয়েছিলাম সেটা শেয়ার করতে পারি।\nইন্টারভিউয়ার যখন জিজ্ঞাসা করেছিল, \u0026ldquo;Why did you apply for this company?\u0026rdquo; আমি তখন এক কথায় উত্তর দিয়েছিলাম, \u0026ldquo;আমার বাবা-মা চায় আমি বিদেশ চলে যাই।\u0026rdquo; আমার উত্তর শুনে ইন্টারভিউয়ার একটু হাসল আর জিজ্ঞাসা করল, \u0026ldquo;তুমি কি এমন করেছ যে তোমার বাবা-মা চায় তুমি দেশ ছেড়ে চলে যাও\u0026rdquo;। আমিও তখন হেসে উত্তর দিলাম, \u0026ldquo;ব্যাপারটা আসলে এমন না। আমার বাবার যেহেতু এখন কোন কাজ নেই এবং পরিবারের বড় সন্তান হিসেবে আমাকে পরিবারে একটা কন্ট্রিবিউশন করা লাগে, তাই চিন্তা করে দেখলাম জব নিয়ে দেশের বাহিরে গেলে সেটা আমার জন্য ভাল হবে।\u0026rdquo; আমি তখন পাঠাওতে কাজ করতাম, আমার বেতন মাশা\u0026rsquo;আল্লাহ্‌ খুব ভালই ছিল। বাংলাদেশের মার্কেট স্ট্যান্ডার্ডে one of the best, if not the best। শুধু নিজের চিন্তা করলে খুব ভালভাবেই চলে যেত। কিন্তু যেহেতু আমার পরিবারে মানুষ বেশী তাই ভবিষ্যতের কথা চিন্তা করে দেখলাম যা পাচ্ছি তার চেয়েও আরো বেশী লাগবে। এই জন্য বিদেশে যাওয়ার কথা চিন্তা করলাম।\nএটা শুনার পর জিজ্ঞাসা করল, \u0026ldquo;Why germany? Why not any other country?\u0026rdquo; আমি উত্তর দিলাম, \u0026ldquo;টাকা-পয়সা অবশ্যই দরকার। তবে আমার কাছে লাইফও গুরুত্বপূর্ণ। আমি একটু রিসার্চ করে দেখলাম ইউরোপে work-life balance অনেক ভাল। আর বর্তমানে জার্মানিতে IT industry অনেক ভাল এবং জার্মানির অর্থনীতি খুব শক্তিশালী, তাই জার্মানিই প্রথম পছন্দ। আর যেহেতু ঘুরাঘুরি করতে ভাল লাগে তাই জার্মানি আসতে পারলে এখান থেকে ইউরোপের অন্যান্য যে কোনও দেশে সহজেই ঘুরা যাবে।\u0026rdquo; এইটা শুনে জিজ্ঞাসা করল, \u0026ldquo;এখন পর্যন্ত তুমি কিরকম ঘুরাঘুরি করেছ?\u0026rdquo; আমি তখন বলে দিলাম আমাদের দেশের রাজশাহী, বিরিশিরি, কক্সবাজার, বান্দরবান, রাঙ্গামাটি, খাগড়াছড়ি, সাজেক সহ অন্যান্য অনেক যায়গায় ঘুরেছি। সাথে কিছু যায়গার নির্দিষ্ট কিছু বৈশিষ্ট্য তুলে ধরেছি। যদিও তখন খুশিমনে বলে দিয়েছি সব; কিন্তু পরে চিন্তা করে বুঝলাম আসলে এই প্রশ্নটা করেছিল আমার জেনুইনননেস বুঝার জন্য। আমি যে ঘুরাঘুরি করতে পছন্দ করি, সেটা আসলেই করি কিনা সেটা আমার উত্তর থেকে তারা বুঝে নিয়েছে।\nজেনুইনন্নেস বুঝার জন্য আরেকটা মজার প্রশ্ন করেছিল। হুট করে একজন জিজ্ঞাসা করে বসল, \u0026ldquo;Oh I see you are a pizza fan, what is your favorite pizza?\u0026rdquo; আমি তখন একটু অবাক হয়ে জিজ্ঞাসা করলাম, \u0026ldquo;errm, Can I please ask from where did you know that I am a pizza fan?\u0026rdquo; সে উত্তর দিল, \u0026ldquo;oh it was written in your github page\u0026rdquo; এটা শুনে আমার একটু খুশি লাগলো যে সে আমার ব্যাপারে গুগল করে দেখেছে। কারণ আমি আমার ওয়েবসাইটের লিঙ্কটা সিভিতে দেইনি। তো আমি লালবাগের ভুতের বাড়ির 4 season পিজ্জা, পিজ্জা গাইয়ের vegetrian nightmare পিজ্জা এই ২টার বর্ণনা দিয়ে দিলাম। সাথে বোনাস হিসেবে বনানীর পিজ্জা বক্স নামে একটা দোকান ছিল সেটাও উল্লেখ করলাম। কারণ আমি, আমার ফ্রেন্ড নিক্সন ও রাতুল মাঝে মাঝেই চলে যেতাম সেখানে অফিস শেষে শুধুমাত্র ৮০০ টাকায় ২টা বড় বড় পিজ্জা পাওয়া যেত বলে। 😉\nএরপরে উল্লেখ করলাম, আমি যেই টেকনোলজি নিয়ে বর্তমানে কাজ করি trivago এর এই জব পোস্টের রিক্যুয়ারমেন্টের সাথে বেশিরভাগই মিলে যায়। তবে কিছু টেকনলজিতে এখনো কাজ করা হয় নাই, যেগুলো অন্যান্য কাজের কারণে বর্তমান যায়গায় শেখা হচ্ছে না।\nআমার অর্থনৈতিক অবস্থা ও লাইফ গোলস গুলো শেয়ার কারণে তাদের মধ্যে কোন সহানুভূতি তৈরি হবে না। কারণ দিন শেষে আপনার দক্ষতাটাকেই তারা আগে দেখবে। তবে আপনার ভিশন কি, মিশন কি, এবং ভবিষ্যতে যা যা চাচ্ছেন সেই ব্যাপারে আপনি নিজে পরিষ্কার কিনা সেটা জানানোও অনেকটা জরুরী। কারণ আপনি আপনার লক্ষ্যে পরিষ্কার থাকলেই কর্মক্ষেত্রে আপনার সেরাটা দিতে পারবেন।\nDo you have any questions for us? আপনার কি কোন প্রশ্ন আছে? প্রায় মোটামুটি প্রত্যেক ইন্টারভিউ শেষেই এই প্রশ্নটা করা হয়। এবং এটা খুবই গুরুত্বপূর্ণ একটা প্রশ্ন। আপনার যদি ভাল কোন প্রশ্ন থাকে তাহলে এই পজিশনে জয়েন করার জন্য আপনার যে প্রবল ইচ্ছা আছে সেটা প্রকাশ পায়। ইদানীং অনেক ইন্টারভিউ বোর্ডে থাকি। যখন ইন্টারভিউ শেষে এই প্রশ্নটা করা হয় বেশীরভাগ সময়েই তাদের হয় কোন প্রশ্ন থাকে না, অথবা এমন সব প্রশ্ন করে যার উত্তর জব পোস্টেই মেনশন করা আছে। এই যেমন, আপনাদের টিমের প্রোগ্রামিং ল্যাঙ্গুয়েজ কি, আপনারা কোন ফ্রেমওয়ার্ক দিয়ে কাজ করেন, কি কি টেক ইউজ করেন ইত্যাদি। এই রকম প্রশ্নের মাধ্যমে প্রকাশ পেতে পারে আপনি হয়তবা জব পোস্টটা ভাল করে পড়েননি অথবা পর্যাপ্ত মনোযোগ দেননি।\nএকটা ভাল প্রশ্ন হতে পারে যিনি ইন্টারভিউ নিচ্ছেন তাকে জিজ্ঞাসা করা, \u0026ldquo;এই কোম্পানিতে একজন চাকরিজীবী হিসেবে আপনার সবচয়ে ভাল অভিজ্ঞতা কি?\u0026rdquo; যিনি উত্তর দিবেন তার উত্তর শুনে বুঝতে পারবেন তার অভিজ্ঞতা কি আসলেই ভাল নাকি উনি বলতে গেয়ে হিমশিম খাচ্ছেন। এই প্রশ্নের উত্তর থেকে আপনি মোটামুটি সেই কোম্পানি কালচার সম্পর্কে একটা ধারনা পেয়ে যাবেন। মনে রাখতে হবে ইন্টারভিউ আসলে দুইদিকেই হয়। তারা যেমন কোম্পানির হয়ে আপনার ইন্টারভিউ নিচ্ছেন, আপনিও ক্যান্ডিডেট হিসেবে কোম্পানির ইন্টারভিউ নিচ্ছেন। এছাড়া টেকনোলজি, ওয়ার্ক কালচার, অথবা প্রসেস সম্পর্কে জটিল কোন প্রশ্ন থাকলে করতে পারেন যেটা জব পোস্টে উল্লেখ করা নেই।\nকিছু ভাল প্রশ্ন হতে পারে কোম্পানি সম্পর্কে একটু ঘাটাঘাটি করে বিজনেস রিলেটেড প্রশ্ন করা। আপনি ইঞ্জিনিয়ারিং, সেলস, মার্কেটিং যেই ফিল্ডেই কাজ করেন না কেন, যদি কোম্পানির বিজনেজ ভাল গতিতে না আগায় তাহলে সেখানে কাজ করা আপনার ভবিষ্যতের জন্য ভাল নাও হতে পারে। আমি যখন trivago তে অ্যাপ্লাই করি তখন একটা খবরে দেখেছিলাম বিশ্বব্যাপী কভিড হওয়ার পরে ৯৫% রেভিনিউ লস হয়েছে। আমি প্রশ্ন করেছিলাম \u0026ldquo;৯৫% রেভিনিউ লস হওয়ার পরেও trivago অনেক মানুষ হায়ার করছে, এইটার কারণ কি? এবং আগামী কয়েক বছরেও ট্রাভেল ইন্ডাস্ট্রি থেকে আগের মত ব্যবসা করা যাবে না। এইটার জন্য trivago কি কি পদক্ষেপ নিচ্ছে?\u0026rdquo; প্রশ্নের উত্তর হিসেবে ইন্টারভিউয়ার তখন তাদের কোম্পানি নিয়ে ভবিষ্যৎ প্ল্যান কি, এবং বিজনেস কোথায় কোথায় শিফট/রেনোভেট করবে সেই প্ল্যান শেয়ার করল। যেটা আমার কাছে বিশ্বাসযোগ্য মনে হয়েছে। এইরকমের প্রশ্ন করার মানে হচ্ছে আপনার জীবনের পরবর্তী পদক্ষেপটা আপনি খুব গুরুত্ব নিয়ে দেখছেন। আপনার এই ফোকাসের কারণে অন্যান্য অনেক ক্যান্ডিডেট থেকে আপনাকে খুব সহজেই আলাদা করা যাবে।\nশেষ কথা অনেকগুলো সফট স্কিল প্রশ্ন আছে। সবগুলোর মধ্যে এই ৩টা আমার সবচেয়ে গুরুত্বপূর্ণ মনে হয়েছে। অন্যান্য সফট স্কিল সম্পর্কে জানতে গুগলে সার্চ করে জেনে নিতে পারেন। কোন প্রশ্ন থাকলে কমেন্টে জানাতে পারেন। সময় পেলে পরবর্তীতে আলোচনা করার চেষ্টা করব।\nপর্ব ০ঃ aniskhan001.me/life/জব-নিয়ে-কিভাবে-বিদেশে-যাওয়া-যায়-পর্ব-০ পর্ব ১ঃ aniskhan001.me/life/জব-নিয়ে-কিভাবে-বিদেশে-যাওয়া-যায়-পর্ব-১\nব্লগটা ভিডিও আকারে দেখতে চাইলেঃ ","permalink":"https://aniskhan001.me/life/%E0%A6%9C%E0%A6%AC-%E0%A6%A8%E0%A6%BF%E0%A6%AF%E0%A6%BC%E0%A7%87-%E0%A6%95%E0%A6%BF%E0%A6%AD%E0%A6%BE%E0%A6%AC%E0%A7%87-%E0%A6%AC%E0%A6%BF%E0%A6%A6%E0%A7%87%E0%A6%B6%E0%A7%87-%E0%A6%AF%E0%A6%BE%E0%A6%93%E0%A6%AF%E0%A6%BC%E0%A6%BE-%E0%A6%AF%E0%A6%BE%E0%A6%AF%E0%A6%BC-%E0%A6%AA%E0%A6%B0%E0%A7%8D%E0%A6%AC-%E0%A7%A8/","summary":"\u003cp\u003eঅনেকগুলো সফট স্কিলের মধ্যে আজ ৩টা খুব গুরুত্বপূর্ণ প্রশ্ন নিয়ে কথা বলব। প্রশ্ন ৩টা হচ্ছেঃ\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTell me about yourself\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWhy did you apply for this company?\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDo you have any questions for us?\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003etrivago তে ইন্টারভিউ দেয়ার সময় এই প্রশ্নগুলোর উত্তর আমি কিভাবে দিয়েছিলাম সেটাও শেয়ার করবো।\u003c/p\u003e\n\u003ch2 id=\"tell-me-about-yourself---আপনর-সমপরক-কছ-বলন\"\u003eTell me about yourself - আপনার সম্পর্কে কিছু বলুন\u003c/h2\u003e\n\u003cp\u003eএই প্রশ্নটা খুব সহজ প্রশ্ন হলেও উত্তরটা মাঝে মাঝে খুব কঠিন হয়ে যায়। নিজের সম্পর্কে কিছু জানতে চাওয়া হলে অনেকেই আগে কি কি করছেন এবং বর্তমানে কর্মক্ষেত্রে কি কি নিয়ে কাজ করছেন সেটা বলা শুরু করেন। কিন্তু আমার মনে হয়ে এটা একটা ভুল এপ্রোচ। কারণ আপনি যা যা করেছেন বা এখন যা যা করেছেন তা আপনার সিভি/রেজুমে তে অলরেডি দেয়া আছে। তাই ২-৫ মিনিট সময় ব্যয় করে এই তথ্যগুলো পুনরায় না দেয়াই ভাল। আমাকে এই প্রশ্ন করলে আমার উত্তর হবেঃ\u003c/p\u003e","title":"জব নিয়ে কিভাবে বিদেশে যাওয়া যায়?"},{"content":"প্রস্তুতি নেয়ার আগে আরো কি কি ব্যাপার মাথায় রাখা দরকার সেই ব্যাপারে আগের পর্বে বলেছিলাম। আশা করি কিভাবে মাইন্ড সেট করা যায় তার কিঞ্চিৎ ধারণা পেয়েছেন। এই পর্বে আসল প্রস্তুতি নিয়ে কথা বলব।\nটেকনিক্যাল নাকি সফট স্কিল চাকরীর জন্য মুলত ২ ধরনের দক্ষতা বা স্কিল লাগে। টেকনিক্যাল স্কিল আর সফট স্কিল। আমরা যারা টেকনিক্যাল ব্যাকগ্রাউন্ডে আছি তারা মাঝে মাঝে একটা ভুল ধারণা পোষণ করি। সেটা হচ্ছে “টেকনিক্যালি সাউন্ড হলেই আমার জব হয়ে যাবে\u0026quot;। অনেকে দেখেছি নিজের স্কিল ভাল মনে করে ইন্টারভিউ বোর্ডে একটা \u0026lsquo;ড্যাম কেয়ার\u0026rsquo; ভাব নিয়ে বসে থাকে। কিছু ব্যাপার পছন্দ না হলে তাচ্ছিল্যের সুরে কথা বলে। এইটা আসলে ঠিক না। এইখানে সফট স্কিল অনেক অনেক বেশী গুরুত্বপূর্ণ। যেখানে কাজ করতে যাচ্ছেন সেখানে আপনার ভবিষ্যৎ কলিগ যারা থাকবে তারা যদি আপনার তাচ্ছিল্যতার কারণে হীনমন্যতায় ভুগে তাহলে কিন্তু তারা কর্মক্ষেত্রে তাদের সেরাটা দিতে পারবে না। এবং আপনার সাথে কাজ করার আগ্রহ হারিয়ে ফেলবে। ইন্টারভিউয়ার যখন এই ব্যাপারগুলো নোটিশ করবে তখন \u0026ldquo;টিম হেলথ\u0026rdquo; এর কথা চিন্তা করে আপনাকে রিক্রুট করবে না, যত মেধাবীই হন না কেন। কথায় আছে, \u0026ldquo;দুর্জন বিদ্বান হলেও পরিত্যাজ্য\u0026rdquo;। যদিও আমাদের দেশে এই প্র্যাকটিসটা বেশীর ভাগ যায়গাতেই দেখা যায় না। দুঃখজনক হলেও সত্যি। তবে বাহিরের উন্নত দেশগুলোতে এটা খুবই গুরুত্বপূর্ণ একটা পয়েন্ট।\nআবার এমনও হতে পারে, আপনি হয়ত কিছু টেকনিক্যাল ব্যাপার এখনো জানেন না। কিন্তু আপনি যা জানেন তা শিখাতে আগ্রহী। এবং যা জানেন না তা অন্যান্য টিমমেটদের থেকে শিখতে আগ্রহী, তাহলে ইন্টারভিউ বোর্ডে অন্যান্য অনেকের থেকে আপনার মূল্য বেশী হতেও পারে। আরেকটা ব্যাপার হচ্ছে প্রশংসা করা। কোন কলিগ যখন সামান্য কোন কাজ করল সেটাকে প্রশংসা করা এক ধরনের ভাল প্র্যাকটিস। আপনি যখন প্রশংসা করবেন তখন যে আপনার সাথে কাজ করছে সে অনেক উৎসাহিত ফীল করবে। এর মানে তার কাছ থেকে পরবর্তীতে অনেক বেশী আউটপুট পাওয়া যাবে। কিন্তু আপনি যদি তাকে তাচ্ছিল্য করা শুরু করেন তাহলে দেখবেন যে আসলে কাজে মন দিতে পারছে না। আলটিমেটলি, আপনার টিমের জন্য ভাল কিছু হচ্ছে না। এতক্ষণ যা নিয়ে কথা বললাম এইটা টিমওয়ার্ক বা কোলাবোরেশন এর কিছু অংশ, যা অনেকগুলো সফট স্কিলের মধ্যে একটা। এছাড়াও কমিউনিকেশন, টাইম ম্যানেজমেন্ট, স্ট্রেস ম্যানেজমেন্ট, ডিসিশন মেকিং ইত্যাদি আরো কিছু সফট স্কিলস আছে যেগুলোতে আমাদের নজর দেয়া উচিৎ। আপনি যখন একটা যায়গায় চাকরী করতে যান সেখানে টেকনিক্যাল স্কিল অবশ্যই অনেক বড় একটা বিষয়। কিন্তু এইটা ছাড়াও যে গুরুত্বপূর্ণ অনেক সফট স্কিল আছে সেগুলো আসলে বাদ দিলে চলবে না।\nইন্টারভিউ দিতে হবে অনেক টেকনিক্যাল স্কিল কি কি লাগবে এই ব্যাপারে আমি খুব ভালো বলতে পারব না। কারণ বিভিন্ন পোস্টে বিভিন্ন রকমের স্কিল লাগে। যেটা আপনার অর্জন করতে হবে শিখে শিখে। আপনি যে ব্যাকগ্রাউন্ডে আছেন সেটা নিয়ে পড়াশোনা করতে হবে। আর বর্তমানে ইন্টারনেটে বই, ভিডিও টিউটরিয়াল, আর্টিকেল, ব্লগ ইত্যাদি সহ অনেক ভাল ভাল রিসোর্স পাওয়া যায়। এছাড়া আমাদের দেশের টেক কমিউনিটিও ইদানীং অনেক ভাল। সিনিয়রদের কাছে অনেক বিষয়ে সাহায্য পাওয়া যায়। সাথে ফেসবুকে বিষয়ভিত্তিক অনেক টেকনিক্যাল ডিসকাশন গ্রুপ আছে।\nতবে আমি বলতে পারি, ইন্টারভিউ দিতে হবে অনেক। তাহলে অনেক কিছু জানা যাবে। প্রথমতই ধারণা হবে বাহিরের দেশের কোম্পানীগুলোর ইন্টারভিউ কেমন হয়। কোন কোম্পানি কেমন প্রশ্ন করে, কোথায় সুযোগ সুবিধা কেমন এইসবও জানা যাবে। ইন্টারভিউতে আপনার পূর্ববর্তী প্রজেক্ট অথবা চাকরীর অভিজ্ঞতা শেয়ার করবেন তাদের সাথে। তারাও বলবে তাদের কোম্পানিতে কিভাবে তারা কাজ করে। নতুন নতুন ধারণা পাবেন, কোন কিছু না জানলে সেটা রিসার্চ করে শিখে নিতে পারবেন। পরে সেটা নিজের প্রোজেক্টে কাজে লাগানো যাবে। এভাবেই নিজের প্রোফাইল, রেজুমে আরো ভারি হবে।\nঅনেকে ইন্টারভিউ দিতে চান না। এই ভেবে যে, জব requirement এ যা যা চেয়েছে আমি তো সব পারি না। শুধু শুধু ইন্টারভিউ দিয়ে কি লাভ? এইটা একটা ভুল ধারণা। যা যা চেয়েছে তার সবকিছুই যদি আপনি জানেন তাহলে ভাল সম্ভাবনা আছে আপনাকে ওই পজিশনের জন্য নাও নিতে পারে। কারণ সব যদি জেনেই থাকেন তাহলে আপনার জন্য নতুন করে শেখার তেমন কিছু নাই ওই পজিশনে। কয়েক সপ্তাহ পরেই আপনার জবটা বোরিং লাগা শুরু করতে পারে। এবং আপনি নতুন জব খোঁজা শুরু করবেন হয়ত। এই কথা চিন্তা করে অনেক সময় আপনার ফুল কোয়ালিফিকেশন থাকা সত্ত্বেও আপনাকে ওই নির্দিষ্ট পজিশনের জন্য নাও নিতে পারে। এমন ঘটনা আমাদের টিমের একটা পজিশনে ২-৩ বার ঘটেছে। ভাগ্যক্রমে আমিও ছিলাম ইন্টারভিউ বোর্ডে। অনেক কিছু শিখেছি কলিগদের কাছ থেকে।\nতাই ছোট একটা টিপস হচ্ছে, জব অ্যাপ্লিকেশনে যা যা চেয়েছে তার সবকিছু জানা লাগবে না অথবা এক্সপার্ট হওয়া লাগবে না। ইদানীং অনেক জব পোস্টে আলাদা ভাবে উল্লেখ করা থাকে কি কি ব্যাপার জানতেই হবে। আর কি কি ব্যাপার জানা থাকলে ভাল। তো আপনি চাইলে সেগুলো উপেক্ষা করতে পারেন। ইন্টারভিউতে প্রশ্ন করলে বলতে পারবেন ওইটা আমি এখনো জানি না, তবে শিখে নিতে পারব এবং আমি শিখতে খুব আগ্রহী।\nসিভি আর রেজুমের পার্থক্য জবে অ্যাপ্লাই করার আগে সিভি/রেজুমে থাকতে হবে। সিভি আর রেজুমের মধ্যে কি কি পার্থক্য তা অনলাইনে একটু ঘাটাঘাটি করে জেনে নিতে পারেন। তবে সারমর্ম হচ্ছে রেজুমে একটু ছোট, সাধারণত ১ পেজের হয়। ২ পেজও হতে পারে যদি অনেক বেশী কিছু উল্লেখ করার দরকার পরে। আর সিভিতে চাইলে অনেক কিছু বিস্তারিত লেখা যায়। তাই রেজুমে অপেক্ষা সিভি বড় হয়। তবে যত ছোট করা যায় তত বেশী ভাল। কারণ, রিক্রুটাররা সিভি/রেজুমে স্কিম করার জন্য সাধারণত ১০ সেকেন্ড এর বেশী দেয় না। এর মধ্যে যদি আপনার রেজুমে তাদের মনোযোগ নিতে পারে তাহলে তারা আরো কিছু সময় দেখে চিন্তা করবে আপনাকে প্রথম ইন্টারভিউতে ডাক দেয়া যায় কিনা।\nসিভি/রেজুমে তে কি কি লাগবে? কয়েকটা ইন্টারভিউ বোর্ডে থাকার কারণে আমি অনেক অনেক সিভি/রেজুমে দেখেছি। অনেক সিভিতেই দেখি ক্যান্ডিডেট কি কি করেছেন তার বর্ণনা দিয়ে থাকে। কিছু উদাহরণ এমনঃ\nআমি একটা কমপ্লিট ই-কমার্স সিস্টেম বানিয়েছি PHP/Java/Go ইত্যাদি দিয়ে অমুক একটা অ্যাপ্লিকেশন বানিয়েছি এইভাবে লিখলে আপনার কাজ সম্পর্কে খুব ভাল কোন অর্থ বহন করে না। কারণ এই ধরনের অ্যাপ্লিকেশন সাধারণত কোন কোম্পানিতে একা কেউ বানায় না। একটা টীমে কয়েকজন একসাথে কাজ করে। কি কি করেছেন সেইটা বলার চেয়ে আপনি কোন মডিউলে কাজ করেছেন এবং আপনার কাজের জন্য কি রকম বিজনেস ইমপ্যাক্ট পড়েছে সেটা অনেক বেশী গুরুত্বপূর্ণ। যেমন আমি যদি আগের উদাহরণটাই একটু অন্য ভাবে লিখি।\nআমি XYZ ই-কমার্স সিস্টেমের পেমেন্ট মডিউলের আর্কিটেকচারটা নতুন ভাবে ডিজাইন করে সার্ভারের লোড কমিয়েছি, যার কারণে সার্ভার খরচ আগের চেয়ে ৩০% কমেছে একটা মজার ব্যাপার হচ্ছে ইদানীং অনেক কোম্পানি সিভি/রেজুমে স্ক্রিনিং করার জন্য অটোমেটেড সফটওয়্যার ব্যবহার করে। যদি ফরম্যাট ঠিকঠাক না থাকে, অথবা কাঙ্ক্ষিত কোন কিওয়ার্ড না পাওয়া যায়, তাহলে প্রি-স্ক্রিনিং এই আপনার প্রোফাইল বাদ পরে যাওয়ার সম্ভাবনা থাকে। পোস্টের শেষে একটা লিঙ্ক দেয়া আছে যেটি ব্যবহার করে ফ্রীতে রেজুমে স্ক্যান করে নিতে পারবেন। তাহলে কোথায় কি কি ফিক্স করা দরকার সেই ধারণা পাওয়া যাবে, এবং পরবর্তীতে আরো ভালভাবে আপনার রেজুমে সাজাতে পারবেন। মনে রাখবেন, কি কি করেছেন সেটা না উল্লেখ করে আপনার কাজের কারণে কি কি ইমপ্যাক্ট পড়েছে সেটা উল্লেখ করা অনেক ভাল। সোজা কথায় আপনার অ্যাচিভমেন্ট গুলো কি কি।\nআর রেজুমে সময় নিয়ে বানাবেন। ২-১ দিনে হয়ত ভাল করে বানাতে পারবেন না। প্রয়োজনে ১-২ সপ্তাহ সময় নিয়ে ভাল করে বানান। কারণ রেজুমে আপনার সম্পদ। পরবর্তীতে যখন আরো দক্ষতা আর অভিজ্ঞতা অর্জন করবেন এইটা আস্তে আস্তে রেজুমেতে আপডেট করে নিবেন। অন্য কারো রেজুমে দেখে অনুপ্রেরণা নিতে পারেন। কিন্তু কখনোই কপি করবেন না। নিজে থেকে যখন কিছু লিখবেন তখন আপনার আগের কাজ করা সব স্টোরিগুলো মনে পরবে। এইগুলোই তখন গল্প আকারে ইন্টারভিউতে বলতে পারবেন। আর ইন্টারভিউয়াররা আসলে এটাই দেখতে চায়। আপনি যা লিখেছেন তার বিস্তারিত তাদেরকে বলতে পারছেন কিনা। রেজুমে থেকে কোন প্রশ্ন করলে আপনি তাদের সাথে আপনার পূর্ববর্তী কাজ নিয়ে যখন একটা হাই ব্যান্ডউইধ আলাপ করতে পারবেন তখন আপনাকে জেনুইন ক্যান্ডিডেট হিসেবে মূল্যায়ন করবে।\nকভার লেটার কেমন হওয়া উচিৎ ইঞ্জিনিয়ারিং ফিল্ডে বর্তমানে কভার লেটার সব সময় চাওয়া হয় না। মডার্ন জব সাইটগুলোতে এমন ভাবে প্রশ্নমালা দেয়া থাকে যেখানে সিভি/রেজুমে আপলোড করার পর প্রশ্নের উত্তরগুলো দিলে প্রগ্রেসিভ আকারে অ্যাপ্লিকেশন হয়ে যায়। তারপরেও কোথাও কোথাও কভার লেটার অপশনাল রাখা হয়। কভার লেটার দেয়ার অপশন থাকা মানে আপনার নিজের সম্পর্কে আরো কিছু জানানোর সুযোগ থাকে। যেগুলো আপনি রেজুমেতে উল্লেখ করতে পারেন নি। কভার লেটার লিখার আগে যেই কোম্পানিতে অ্যাপ্লাই করছেন তার সম্পর্কে একটু রিসার্চ করতে পারেন। তাদের বিজনেস মডেল কেমন। এই বিজনেজ মডেলে আপনার আগের কোন কাজ করার অভিজ্ঞতা আছে কিনা। অথবা দেখতে পারেন তাদের বর্তমান টেকনিক্যাল চ্যালেঞ্জ কি কি। বর্তমান অবজেক্টিভের সাথে আপনার স্কিল ম্যাচ করে কিনা। তখন উল্লেখ করতে পারেন আপনি এই রকম অভিজ্ঞতা থাকার কারণে কিভাবে বর্তমান চ্যালেঞ্জগুলো সমাধান করতে পারেন। অথবা অভিজ্ঞতা না থাকলেও আপনার টেকনিক্যাল গুন ছাড়া অন্য কি কি গুন আছে যেটার কারণে আপনি সেই কোম্পানির উপকারে আসবেন।\nহয়ত জব ডেসক্রিপশনে থাকতে পারেঃ\nআমরা লিগ্যাসি সফটওয়্যারের মনোলিথ আর্কিটেকচার থেকে মাইক্রো-সার্ভিসে কনভার্ট করতে চাচ্ছি আপনার এইরকম অভিজ্ঞতা থাকলে সেটা উল্লেখ করে বলতে পারেনঃ\nআমরা ৩ জনের টীমে কাজ করে এইটা খুব ভাল ভাবে মাইক্রো সার্ভিসে শিপ করেছি। আগে আমাদের RPS ছিল ২০০, এখন আমরা ১০০০ পর্যন্ত নিতে পারি মনে রাখতে হবে, কভার লেটার কখনোই কপি করবেন না অথবা টেম্পলেট বানাবেন না। একটু সময় নিয়ে ঘাটাঘাটি করে কভার লেটার লিখবেন। কোম্পানি বা ওই পজিশনের ব্যাপারে রিসার্চ করে যে পয়েন্টগুলোতে কথা বলা দরকার, ঠিক সেই পয়েন্টেই যখন আপনি কথা বলবেন তখন হায়ারিং ম্যানেজারের কাছে আপনার প্রায়োরিটি অনেক বেড়ে যাবে। টেম্পলেট পাঠালে সাথে সাথে বাদ দিয়ে দেয়ার সম্ভাবনা অনেক বেশী।\nবেশী বেশী অ্যাপ্লাই করতে হবে ভাল জব পাওয়ার একটা রহস্য হচ্ছে বেশী বেশী জবে অ্যাপ্লাই করতে হবে। যত বেশী অ্যাপ্লাই করবেন তত বেশী ইন্টারভিউ পাওয়ার সম্ভাবনা বাড়বে। অ্যাপ্লাই করে ইন্টারভিউ না পেলে হতাশ হওয়া যাবে না। হয়ত আপনি ১০টা জবে অ্যাপ্লাই করলে ১টা ইন্টারভিউতে ডাক পেতে পারেন। যদি অনেক জবে অ্যাপ্লাই করার পরেও ইন্টারভিউতে ডাক না পান তাহলে বুঝতে হবে রেজুমে বা সিভিতে কিছু মিসিং আছে। প্রয়োজনে আবার এই ব্লগ পোস্টটা ভিজিট করতে পারেন। যেসব টিপস এবং টুলস নিয়ে বলেছি সেগুলো আবার রিভিজিট করতে পারেন। এই বিষয়ে আমি ছাড়াও অনেকে কথা বলছে ইন্টারনেটে। তাদের ব্লগ, ভিডিও, অন্যান্য কন্টেন্টগুলোও দেখুন। তারপর নিজের মত একটা স্টাইল দাঁড় করান।\nজব আপ্লিকেশন থেকে শুরু করে প্রথম, দ্বিতীয় ও তৃতীয় ইন্টারভিউ এবং কখনো কখনো চতুর্থ ইন্টারভিউ দেয়া লাগে। এর পরে অফার পাওয়া, সেটায় রাজি হওয়া, দেশের বাহিরে যাওয়ার প্রস্তুতি নেয়া, শেষে জয়েনিং করা পর্যন্ত এই যাত্রা পথটা মোটামুটি বড় ও সময় সাপেক্ষ। তাই একটু ধৈর্য ধরে অল্প অল্প করে কাজ করে যেতে হবে। আমি, আমার বন্ধুরা ও আগের অফিসের কলিগ যারা এই রকম জব নিয়ে বিদেশে এসেছেন তারা সবাই এইরকম ধৈর্যের পরীক্ষা দিয়েই এসেছেন। চাইলে আপনিও পারবেন। :)\nকোম্পানির খুঁটিনাটি বের করুন জবে অ্যাপ্লাই করার জন্য অনলাইনে অনেক সাইট আছে। যেমনঃ LinkedIn, Glassdoor, StackOverflow ইত্যাদি। আপনি যদি কোন কোম্পানিকে পছন্দ করে থাকেন বা অনেকদিন যাবৎ ফলো করে থাকেন তাহলে তাদের কোম্পানি পেজ থেকে সরাসরি অ্যাপ্লাই করতে পারেন। তবে জব লিস্টিং সাইট থেকে অনেক গুরুত্বপূর্ণ ইনসাইট পাওয়া যায়।\nযেমনঃ লিঙ্কডইনে যে কোন কোম্পানির বর্তমান এমপ্লয়ী যারা আছে তাদের প্রোফাইল দেখতে পারবেন। তারা কি কি নিয়ে কাজ করে ধারণা পাবেন। অথবা তারা আগে কি কি স্কিল নিয়ে এই রকম জবে এসেছে সেটার ব্যাপারে মোটামুটি একটা ধারণা করতে পারবেন। এবং বুঝতে পারবেন তাদের মত আপনারও কোন নির্দিষ্ট বিষয়ে জানা লাগবে কিনা।\nআবার গ্লাসডোরে অনেক কোম্পানির বর্তমান এমপ্লয়ীদের বিভিন্ন পজিশন ভিত্তিক বেতন কেমন সেটাও উল্লেখ করা থাকে। আপনার জন্য তখন সিদ্ধান্ত নেয়া সুবিধা হবে ওই কোম্পানিতে জবের জন্য যাবেন কিনা।\nঅথবা কোম্পানির বর্তমান ও আগের ফিনান্সিয়াল অবস্থা জানার জন্য crunchbase ব্যবহার করতে পারেন। এই টুল ব্যবহার করে জানতে পারবেন কোম্পানির সাইজ কেমন। সর্বমোট কত মানুষ সেখানে কাজ করে। গত কয়েক বছরে কি রকমের ফান্ড পেয়েছে, স্টক মার্কেটে তাদের লিস্টিং আছে কিনা ইত্যাদি।\nজীবন vs স্ট্যাটাস বর্তমানে গ্লোবালাইজেশনের কারণে শুধুমাত্র গুগল, ফেসবুক, মাইক্রোসফট ইত্যাদি কোম্পানি বাদেও দুনিয়াতে অনেক ভাল কোম্পানি আছে যাদের ওয়ার্কপ্লেস কাজের জন্য খুবই উপযোগী। হয়ত আমরা সব কোম্পানির নাম জানি না। অমুক কোম্পানিতে চাকরী পাওয়া মানে একটা স্ট্যাটাস, অন্য কোম্পানিতে গেলে আমার স্ট্যাটাস থাকবে না, এই রকম চিন্তা করা এখনকার সময়ে আসলে বোকামি। আগে যেটা বলেছিলাম.. জীবনকে উপভোগ করতে হবে, স্ট্যাটাসকে নয়। এমন হতেই পারে স্ট্যাটাস ও বড় নাম দেখে এমন একটা কোম্পানিতে জয়েন করলেন, যেখানে অফিস পলিটিক্স থেকে শুরু করে মাইক্রো-ম্যানেজমেন্ট ইত্যাদির কারণে জীবনটা আসলে সুন্দর না। আপনি যখন সবকিছু বাদ দিয়ে শুধুই স্ট্যাটাস উপভোগ করা শুরু করবেন তখন আস্তে আস্তে আপনার আশে-পাশে লোকজন পাবেন না। একটা সময় পরে জীবনটা হয়ত আর উপভোগ করা যাবে না।\nশেষ কথা রিসার্চ করতে থাকুন। অনেক বেশী ঘাটাঘাটি করুন। তাহলে অজানা অনেক কিছু জানা যাবে। আশা করি এই পর্বে শেয়ার করা টিপসগুলো কাজে লাগিয়ে আপনি আপনার নিজের স্টাইলটা খুঁজে পাবেন এবং খুব ভালভাবে প্রস্তুতি নিতে পারবেন। যারা জব নিয়ে দেশের বাহিরে যাওয়ার চেষ্টা করছেন তাদের সবাইকে প্রথম ইন্টারভিউ পাওয়ার জন্য শুভকামনা। প্রথম ইন্টারভিউ পাওয়ার পরে কমন সফট স্কিল প্রশ্ন কি কি থাকে এবং উত্তরগুলো কেমন হওয়া উচিৎ সেটা নিয়ে পরের পর্বে আলাপ করব।\nপরের পর্বের লিঙ্কঃ aniskhan001.me/life/জব-নিয়ে-কিভাবে-বিদেশে-যাওয়া-যায়-পর্ব-২ আগের পর্বঃ aniskhan001.me/life/জব-নিয়ে-কিভাবে-বিদেশে-যাওয়া-যায়-পর্ব-০\nব্লগটা ভিডিও আকারে দেখতে চাইলেঃ গুরুত্বপূর্ণ লিঙ্কঃ ফ্রীতে নিজের রেজুমে স্ক্যান করার টুলঃ TopResume.com প্রফেশনাল নেটওয়ার্ক সাইটঃ LinkedIn.com জব সার্চ ইঞ্জিন ও রিভিউ সাইটঃ Glassdoor.com জব সার্চ ইঞ্জিনঃ Indeed.com কোম্পানি ডাটাবেজঃ Crunchbase.com ","permalink":"https://aniskhan001.me/life/%E0%A6%9C%E0%A6%AC-%E0%A6%A8%E0%A6%BF%E0%A6%AF%E0%A6%BC%E0%A7%87-%E0%A6%95%E0%A6%BF%E0%A6%AD%E0%A6%BE%E0%A6%AC%E0%A7%87-%E0%A6%AC%E0%A6%BF%E0%A6%A6%E0%A7%87%E0%A6%B6%E0%A7%87-%E0%A6%AF%E0%A6%BE%E0%A6%93%E0%A6%AF%E0%A6%BC%E0%A6%BE-%E0%A6%AF%E0%A6%BE%E0%A6%AF%E0%A6%BC-%E0%A6%AA%E0%A6%B0%E0%A7%8D%E0%A6%AC-%E0%A7%A7/","summary":"\u003cp\u003eপ্রস্তুতি নেয়ার আগে আরো কি কি ব্যাপার মাথায় রাখা দরকার সেই ব্যাপারে \u003ca href=\"/life/%E0%A6%9C%E0%A6%AC-%E0%A6%A8%E0%A6%BF%E0%A6%AF%E0%A6%BC%E0%A7%87-%E0%A6%95%E0%A6%BF%E0%A6%AD%E0%A6%BE%E0%A6%AC%E0%A7%87-%E0%A6%AC%E0%A6%BF%E0%A6%A6%E0%A7%87%E0%A6%B6%E0%A7%87-%E0%A6%AF%E0%A6%BE%E0%A6%93%E0%A6%AF%E0%A6%BC%E0%A6%BE-%E0%A6%AF%E0%A6%BE%E0%A6%AF%E0%A6%BC-%E0%A6%AA%E0%A6%B0%E0%A7%8D%E0%A6%AC-%E0%A7%A6\"\u003eআগের পর্বে\u003c/a\u003e বলেছিলাম। আশা করি কিভাবে মাইন্ড সেট করা যায় তার কিঞ্চিৎ ধারণা পেয়েছেন। এই পর্বে আসল প্রস্তুতি নিয়ে কথা বলব।\u003c/p\u003e\n\u003ch2 id=\"টকনকযল-নক-সফট-সকল\"\u003eটেকনিক্যাল নাকি সফট স্কিল\u003c/h2\u003e\n\u003cp\u003eচাকরীর জন্য মুলত ২ ধরনের দক্ষতা বা স্কিল লাগে। টেকনিক্যাল স্কিল আর সফট স্কিল। আমরা যারা টেকনিক্যাল ব্যাকগ্রাউন্ডে আছি তারা মাঝে মাঝে একটা ভুল ধারণা পোষণ করি। সেটা হচ্ছে “টেকনিক্যালি সাউন্ড হলেই আমার জব হয়ে যাবে\u0026quot;। অনেকে দেখেছি নিজের স্কিল ভাল মনে করে ইন্টারভিউ বোর্ডে একটা \u003cem\u003e\u0026lsquo;ড্যাম কেয়ার\u0026rsquo;\u003c/em\u003e ভাব নিয়ে বসে থাকে। কিছু ব্যাপার পছন্দ না হলে তাচ্ছিল্যের সুরে কথা বলে। এইটা আসলে ঠিক না। এইখানে সফট স্কিল অনেক অনেক বেশী গুরুত্বপূর্ণ। যেখানে কাজ করতে যাচ্ছেন সেখানে আপনার ভবিষ্যৎ কলিগ যারা থাকবে তারা যদি আপনার তাচ্ছিল্যতার কারণে হীনমন্যতায় ভুগে তাহলে কিন্তু তারা কর্মক্ষেত্রে তাদের সেরাটা দিতে পারবে না। এবং আপনার সাথে কাজ করার আগ্রহ হারিয়ে ফেলবে। ইন্টারভিউয়ার যখন এই ব্যাপারগুলো নোটিশ করবে তখন \u0026ldquo;টিম হেলথ\u0026rdquo; এর কথা চিন্তা করে আপনাকে রিক্রুট করবে না, যত মেধাবীই হন না কেন। কথায় আছে, \u003cem\u003e\u0026ldquo;দুর্জন বিদ্বান হলেও পরিত্যাজ্য\u0026rdquo;\u003c/em\u003e। যদিও আমাদের দেশে এই প্র্যাকটিসটা বেশীর ভাগ যায়গাতেই দেখা যায় না। দুঃখজনক হলেও সত্যি। তবে বাহিরের উন্নত দেশগুলোতে এটা খুবই গুরুত্বপূর্ণ একটা পয়েন্ট।\u003c/p\u003e","title":"জব নিয়ে কিভাবে বিদেশে যাওয়া যায়?"},{"content":"ইদানীং একটা প্রশ্ন প্রায়ই আসে… কিভাবে জব নিয়ে বিদেশে যাওয়া যায়? আমি সম্প্রতি একটা চাকরী নিয়ে জার্মানিতে আসি। ট্রিভাগো নামে একটা কোম্পানিতে সফটওয়্যার ইঞ্জিনিয়ার হিসেবে জয়েন করেছি। গত কয়েক মাসে পরিচিত অনেকেই বাংলাদেশ থেকে জব নিয়ে বিদেশে গিয়েছেন। আগের অফিসের কয়েকজন পরিচিতি কলিগ জার্মানি এসেছেন। কিছুদিন আগে আরেক বন্ধু নেদারল্যান্ড আসল। এক বড় ভাই জাপান যাচ্ছেন। আরেক বড় ভাই পরিবার নিয়ে সাউথ কোরিয়াতে গেল কয়দিন আগে। ইদানীং চাকরী নিয়ে বিদেশ যাওয়ার একটা ট্রেন্ড দেখা যাচ্ছে দেশে। আমি জার্মানি আসার পর পরিচিত অনেকেই জানতে চেয়েছেন কিভাবে জব নিয়ে বিদেশে আসা যায়। ফেসবুকে অনেক প্রশ্ন পেয়েছি এ ব্যাপারে। সবাইকে একই প্রশ্নের উত্তর বার বার দেয়া সময় সাপেক্ষ। তাই ভাবলাম, একটা ব্লগ/ভ্লগ করি, যেখানে কমন সব প্রশ্নের উত্তর আর আমার অভিজ্ঞতা শেয়ার করা যাবে।\nকেন বিদেশ যাবেন? সব কিছুর আগে নিজের ভেতরে একটা প্রশ্ন আসা উচিৎ, সেটা হচ্ছে \u0026ldquo;দেশ ছেড়ে কেন বিদেশে যাব?\u0026rdquo; কেন দেশ ছেড়ে বিদেশে যাবেন এইটা খুবই ব্যক্তিগত। কেন আপনি বিদেশ যাওয়ার চিন্তা করছেন এইটা শুধুমাত্র আপনিই ভাল জানেন। তবে দেশ ছেড়ে বিদেশে যাওয়া অনেক কঠিন একটা সিদ্ধান্ত, বিশেষ করে যদি আপনার কোনরকম পিছুটান থাকে। বাবা-মা, পরিবার, আত্মীয়-স্বজন, বন্ধু বান্ধব সবাইকে ছেড়ে একদম নতুন পরিবেশে এসে থাকা, জীবন-যাপন করা একদম সহজ ব্যাপার না। সাথে যদি আপনার উপর পরিবারের কোন দায়িত্ব থাকে সেইদিক চিন্তা করলে আরো অনেক কষ্টকর হয়ে যায়।\nতবে দেশ ছেড়ে একদম অন্য পরিবেশে এসে থাকা এক রকমের অ্যাডভেঞ্চারও বটে! আপনি এমন অনেক অনেক কিছু দেখবেন, অনেক কিছু সম্পর্কে জানবেন যা নিজের এলাকায় বসে কাটিয়ে দিলে হয়ত কখনোই দেখতেন না, অথবা জানতেন না। পৃথিবীর অনেক অনেক আকর্ষণীয় ব্যাপারই হয়ত আপনার অজানা থেকে যেত। যদিও ইন্টারনেটের যুগে এখন অনেক কিছুই সহজ, অনেক তথ্য নিমিষেই পাওয়া যায়। কিন্তু বাস্তব জীবনে দেখা বা অভিজ্ঞতা করার ব্যপারটাই পুরো ভিন্ন। এই একটা কারণে আমি মুভি/সিনেমা খুব বেশী একটা না দেখে গেম খেলি বেশী। গেমের ভিতরে যেই গল্পটা থাকে তা নিজের মত করে উপভোগ করা যায়, যেহেতু প্লেয়ারের কন্ট্রোল আমার হাতে। চাইলেই গল্পের একদম ভিতরে চলে যাওয়া যায়। যাই হোক, এইটা সম্পূর্ণ নিজের অভিমত। কোন রকমের মোটিভেশন না। ক্ষণস্থায়ী জীবনে উপভোগ করার মত অনেক কিছুই আসবে, কিন্তু সেই রকমের সময় পাওয়া যাবে না। তাই কিছু ব্যাপার ত্যাগ করতেই হবে। আস্তে আস্তে ধরতে হবে শুধুমাত্র সেই সব ব্যাপারগুলো যেটা আমার নিজের জন্য ভাল, অথবা নিজের বেশী ভাল লাগে। নিজের সময়টা যাতে সবচেয়ে ভালভাবে উপভোগ করা যায় সেদিকেই মনোযোগ দেয়া উচিৎ।\nবিদেশ যাওয়া সহজ নাকি কঠিন? আমি সফটওয়্যার ইঞ্জিনিয়ারিং চাকরী নিয়ে বিদেশে এসেছি। আমাদের ব্যাকগ্রাউন্ডে যারা আছেন যেমন সফটওয়্যার ইঞ্জিনিয়ার, কোয়ালিটি অ্যাস্যুরেন্স/টেস্ট ইঞ্জিনিয়ার, টেকনিক্যাল প্রোডাক্ট ম্যানেজার, তাদের জন্য এখন ব্যাপারটা আগের চেয়ে অনেক সহজ। আপনার ভাল প্রোফাইল অথবা অভিজ্ঞতা থাকলে দেশের বাহিরের কোম্পানিগুলো তে চাকরী পাওয়া খুবই সহজ। সাথে বিভিন্ন কোম্পানি ইদানীং রিলোকেশন প্যাকেজ অফার করে। দেশ থেকে আসার সময় যাবতীয় অনেক খরচ (ভিসা প্রসেসিং ফী, ফ্লাইট টিকেট, আসবাবপত্র স্থানান্তর ফী, বিদেশে রেসিডেন্ট পারমিট ফী, ইত্যাদি) আপনার কোম্পানি বহন করবে এমন অফার পাওয়া যায়।\nকোন দেশ/শহরে যাব? দেশ/শহর নির্বাচন খুবই গুরুত্বপূর্ণ একটা ব্যাপার। কিছু পরিচিত মানুষ আছেন, তারা অনেকে বলেছেন, বাহিরে যে কোন একটা দেশে যেতে পারলেই হল। ব্যাপারটা কিন্তু এত হেলা ফেলায় দেখলে হবে না। আপনি হয়ত বলতে পারেন, বিদেশ মানেই দেশ থেকে ভাল, এটা সব সময় সত্যি নাও হতে পারে। কোথায় গেলে ভাল হবে সেটা আপনাকে কেউ বলে দিতে পারবে না। এই জন্য আপনার নিজের রিসার্চ করতে হবে। এই যেমন আমি এখন জার্মানির ডুসেলডর্ফ শহরে থাকি। আমি যদি আমার এই এলাকার অভিজ্ঞতা শেয়ার করি সেটা কিন্তু পুরো জার্মানিকে তুলে ধরে না। আমার কয়েকজন বন্ধু জার্মানির বার্লিন, কোলন, স্টুটগার্ট শহরে থাকে। তাদের সাথে আলাপ করতে গেলে দেখা যায় বার্লিন, স্টুটগার্ট আর ডুসেলডর্ফের মধ্যে অনেক পার্থক্য আছে। কাজেই একটা শহরে থাকা মানেই কিন্তু পুরো দেশের অভিজ্ঞতা নিয়ে নিলাম এমন কিন্তু না। আপনার কোথায় গেলে ভাল হবে, কোথায় আপনার ভাল লাগবে সেটা আপনাকেই খুঁজে বের করতে হবে। কোন এলাকার সংস্কৃতি কেমন, আপনার ব্যক্তিত্ব, পছন্দ এসব কিছুর সাথে মানিয়ে নিতে পারবেন কিনা সেটা দেখতে হবে। কারণ আপনি যেই চাকরীর জন্য যাচ্ছেন সেটা আপনি করবেন দিনে ৬-৮ ঘণ্টা। ২৪ ঘণ্টার মধ্যে বাকী পুরোটা সময়, সাথে উইকেন্ডও কাজের বাহিরেই কাটাতে হবে।\nজীবনের \u0026ldquo;core values\u0026rdquo; আপনার জীবনের \u0026ldquo;core value\u0026rdquo; বা \u0026ldquo;মুল অর্থ\u0026rdquo; যা আছে, তা ঠিকঠাক ভাবে বজায় রাখতে পারবেন কিনা। এটা খুবই খুবই গুরুত্বপূর্ণ। সময়ের সাথে অবশ্যই জীবনে পরিবর্তন আসবে। কিন্তু না জেনে এমন এক জায়গায় যাওয়ার কারণে আপনার জীবনের যেই অর্থ সেটা যদি আর নাই থাকে তাহলে কিন্তু জীবনটা আর উপভোগ করা গেল না। পরিবারের ভবিষ্যতের কথা চিন্তা করে আমার দেশের বাহিরে যাওয়ার সিদ্ধান্ত নিতে হয়েছে। যখন দেশের বাহিরে যাওয়ার সিদ্ধান্ত নেই, তখন কিছু বন্ধু-বান্ধব ও আত্মীয়-স্বজন বলছিল আমেরিকা অথবা কানাডা যেতে, তাহলে অনেক পয়সা কামানো যাবে।\nআমার জীবনের \u0026ldquo;core values\u0026rdquo; চিন্তা করলে পয়সা কামানো অবশ্যই একটা বড় ফ্যাক্টর। কিন্তু অনেক পয়সা কামিয়ে তাড়াতাড়ি ধনী হয়ে যাব, গাড়ি-বাড়ি করব এইটা আমার লক্ষ্য না। আমি জীবনটাকে উপভোগ করতে চাই। সেই সাথে আমার পরিবারকেও ভালভাবে সাপোর্ট দিতে চাই। যখন একটু রিসার্চ করলাম, তখন দেখলাম ইউরোপে অধিকাংশে \u0026ldquo;employment law\u0026rdquo; অনেক কঠিন। সময়মত অফিস শেষ হবে, নির্ধারিত সময়ের অতিরিক্ত কাজ করতে হবে না। তাই অফিস শেষে ভাল পরিমাণের ব্যক্তিগত সময় পাওয়া যায়। আরো দেখলাম ব্লু-কার্ড থাকলে ইউরোপিয়ান ইউনিয়ন এর সব কয়টা দেশে বিনা ভিসায় ঘুরতে যাওয়া যাবে। ঘুরাঘুরি ভাল লাগে বলে এই পয়েন্টটা আমার অনেক আকর্ষণীয় মনে হয়েছে। কিন্তু এখানে ট্যাক্সের পরিমাণ অনেক বেশী। বেতনের প্রায় অর্ধেক চলে যাবে ট্যাক্স দিয়েই। তারপরে বাসা ভাড়া, বিল, খাওয়া-দাওয়া, ও অন্যান্য খরচ হিসাব করলে খুব কম পরিমাণ পয়সা বাকি থাকে। যেইটা জমিয়ে খুব তাড়াতাড়ি ধনী হওয়া সম্ভব না। কিন্তু এইটা আমার জন্য গুরুত্বপূর্ণ না। কারণ তাতেই আমি আমার পরিবারকে ভালমত সাপোর্ট দিতে পারব। তাই সব মিলিয়ে আমার ইউরোপ পছন্দ হয়েছে। আমি যখন বাহিরের চাকরী খোঁজা শুরু করি তখন জার্মানির সফটওয়্যার ইন্ডাস্ট্রির অবস্থা ভাল ছিল। অনেক চাকরী ছিল, এখনো আছে। তবে এই অবস্থার পরিবর্তন হতে পারে সময়ের সাথে।\nবর্ণবাদ ও ধর্মীয় অনুভূতি এছাড়াও বর্ণবাদ, ধর্মীয় অনুভূতির ব্যাপার আছে। এইগুলো চিন্তা করাও গুরুত্বপূর্ণ। আমাদের দেশে সবার গায়ের রং কাছাকাছি, তাই বর্ণবাদ ব্যাপারটা হয়ত আমরা খুব ভালভাবে বুঝি না। মুসলিম প্রধান দেশে থাকি বলে যারা মুসলমান আছি, তাদের একটা বড় অংশ ধর্মীয় অনুভূতির ব্যাপারটাও হয়ত খুব ভাল বুঝতে পারি না। ভিন্ন ধর্মের মানুষ যারা আছে, তারা প্রায়ই হীনমন্যতায় ভুগে অন্যদের অনেক কঠিন ও ব্যাথাদায়ক কথার কারণে। যেটা সবাই অনুধাবন করতে পারে না। আমরাও ছোট থাকতে মাঝে মাঝে ভিন্ন ধর্মী মানুষের অনেক কটাক্ষ করে কথা বলতাম, শুধু নিজে মজা পাওয়ার জন্য। কখনো বুঝার চেষ্টা করতাম না তাদের কেমন লাগে। আপনি যেই এলাকায় যেতে চাচ্ছেন ওই এলাকায় যদি আপনি সংখ্যালঘু হন এবং এইরকম বর্ণবাদের শিকার হন, অথবা আপনার ধর্মকে কেউ কটাক্ষ করে কথা বলে সেটা মেনে নিতে পারবেন? নাকি এমন কোন এলাকা খুঁজবেন যেখানে আপনি আপনার মত ধর্ম পালন করতে পারবেন কোন সমস্যা ছাড়াই।\nশেষ কথা আপনার জীবনের \u0026ldquo;core values\u0026rdquo; কি কি সেটা ভালভাবে বসে একবার চিন্তা করুন। তারপর সম মিলিয়ে একটু ঘাটাঘাটি করুন আপনার জন্য বাংলাদেশের বাহিরে পৃথিবীর কোন এলাকাটা সবচেয়ে উপযোগী? কারণ আপনি যখন কাজের মধ্যে থাকবেন তখন হয়ত সব ব্যাপারগুলো অনুধাবন করবেন না। কিন্তু কাজের বাহিরেও যে আলাদা একটা ব্যক্তিগত জীবন আছে সেইটা আমরা প্রায়ই ভুলে যাই মাঝে মাঝে। সেই জীবনটাও আসলে উপভোগ করা দরকার। সেই চিন্তাটাই সবার আগে করা উচিত বলে আমি মনে করি। 🙂\nপরের পর্বের লিঙ্কঃ aniskhan001.me/life/জব-নিয়ে-কিভাবে-বিদেশে-যাওয়া-যায়-পর্ব-১\nব্লগটা ভিডিও আকারে দেখতে চাইলেঃ ","permalink":"https://aniskhan001.me/life/%E0%A6%9C%E0%A6%AC-%E0%A6%A8%E0%A6%BF%E0%A6%AF%E0%A6%BC%E0%A7%87-%E0%A6%95%E0%A6%BF%E0%A6%AD%E0%A6%BE%E0%A6%AC%E0%A7%87-%E0%A6%AC%E0%A6%BF%E0%A6%A6%E0%A7%87%E0%A6%B6%E0%A7%87-%E0%A6%AF%E0%A6%BE%E0%A6%93%E0%A6%AF%E0%A6%BC%E0%A6%BE-%E0%A6%AF%E0%A6%BE%E0%A6%AF%E0%A6%BC-%E0%A6%AA%E0%A6%B0%E0%A7%8D%E0%A6%AC-%E0%A7%A6/","summary":"\u003cp\u003eইদানীং একটা প্রশ্ন প্রায়ই আসে… \u003cstrong\u003eকিভাবে জব নিয়ে বিদেশে যাওয়া যায়?\u003c/strong\u003e \u003cbr\u003e\nআমি সম্প্রতি একটা চাকরী নিয়ে জার্মানিতে আসি। ট্রিভাগো নামে একটা কোম্পানিতে সফটওয়্যার ইঞ্জিনিয়ার হিসেবে জয়েন করেছি। গত কয়েক মাসে পরিচিত অনেকেই বাংলাদেশ থেকে জব নিয়ে বিদেশে গিয়েছেন। আগের অফিসের কয়েকজন পরিচিতি কলিগ জার্মানি এসেছেন। কিছুদিন আগে আরেক বন্ধু নেদারল্যান্ড আসল। এক বড় ভাই জাপান যাচ্ছেন। আরেক বড় ভাই পরিবার নিয়ে সাউথ কোরিয়াতে গেল কয়দিন আগে। ইদানীং চাকরী নিয়ে বিদেশ যাওয়ার একটা ট্রেন্ড দেখা যাচ্ছে দেশে। আমি জার্মানি আসার পর পরিচিত অনেকেই জানতে চেয়েছেন কিভাবে জব নিয়ে বিদেশে আসা যায়। ফেসবুকে অনেক প্রশ্ন পেয়েছি এ ব্যাপারে। সবাইকে একই প্রশ্নের উত্তর বার বার দেয়া সময় সাপেক্ষ। তাই ভাবলাম, একটা ব্লগ/\u003ca href=\"https://youtu.be/m5teFFW2cbI\"\u003eভ্লগ\u003c/a\u003e করি, যেখানে কমন সব প্রশ্নের উত্তর আর আমার অভিজ্ঞতা শেয়ার করা যাবে।\u003c/p\u003e","title":"জব নিয়ে কিভাবে বিদেশে যাওয়া যায়?"},{"content":" A sample program of mine, but not directly related to OOP or SOLID\nআমরা যারা ভার্সিটিতে কম্পিউটার সায়েন্স বা অন্যান্য ইঞ্জিনিয়ারিং বিষয়ে পড়াশুনা করে এসেছি বা এখনো করছি, মোটামুটি সবারই Object Oriented Programming বা OOP শিখতে হয়েছে। যেখানে Encapsulation, Inheritence, Polymorphism ইত্যাদি বিষয়গুলো থাকে। এবং প্রায় সময়ই OOP বোঝার জন্য কিছু সাধারণ উদাহরণ আমরা দেখে এসেছি.. যেমন Vehicle নামে একটা class. এখান থেকে কমন জিনিসগুলো যেমন চাকা, বডি, ইত্যাদি নিয়ে গাড়ি, বাস, ট্রাক ইত্যাদি object হতে পারে। গাড়ির ক্লাস থেকে আবার কিছু অবজেক্ট রং পরিবর্তন করে লাল গাড়ি, নীল গাড়ি, সবুজ গাড়ি ইত্যাদি হতে পারে। অনেকে পরিবারের সম্পর্ক দিয়ে বোঝার চেষ্টা করে.. যেমন দাদা থেকে বাবা, বাবা থেকে তুমি, থাক ওইদিকে আর না গেলাম।\nএই সকল উদাহরণ দিয়ে হয়ত Encapsulation, Inheritence, Polymorphism ইত্যাদি বোঝানো যায়, কিন্তু এই রকম চিন্তা করতে কোড লিখতে গেলে বেশীরভাগ ক্ষেত্রেই সেটা ভাল সফটওয়্যার হয় না। কেন হয় না জানতে পারলাম SOLID principles নিয়ে ঘাটাঘাটি করতে গিয়ে বিখ্যাত Uncle Bob এর একটা বক্তৃতা শুনে। সেখানে উনি OO বা Object Oriented approach এর ব্যাপারে এই কথাটা বলেনঃ\n“You may have heard that OO is modeling the real world. Nonsense! You may have heard that OO is closer to the way we think. No! These things were made up by marketing people in order to sell the idea to executives who didn\u0026rsquo;t know what the programs were.\nOO is about managing dependencies by selectively reinvert certain key dependencies in your architecture so that you can prevent rigidity, fragility, and non-reusability.”\n\u0026ndash; Robert C. Martin a.k.a. \u0026ldquo;Uncle Bob\u0026rdquo;\nতার মানে শুধু ক্লাস আর অবজেক্ট নিয়ে চিন্তা করলেই হবে না। চিন্তা করতে হবে প্রোগ্রামের ফ্লো আসলে কোন দিক থেকে কোন দিকে যাচ্ছে, এবং এর কারণে সফটওয়্যারটা rigid, fragile, and non-reusable হয়ে যায় কিনা? বাংলায় বললে, একরোখা ফ্লো এর কারণে সফটওয়্যারটি \u0026ldquo;ঘাড় ত্যাড়া\u0026rdquo; হয়ে যায় কিনা? বেশ কিছু সময়েই দেখা যায় আমাদের লেখা সফটওয়্যারগুলো একটা সময় এমন ঘাড় ত্যাড়া হয়ে যায় যে পরবর্তীতে ছোট একটা পরিবর্তন আনতে গিয়ে অনেক অপ্রয়োজনীয় জায়গায় কোড পরিবর্তন করা লাগে। এটা সফটওয়্যার ডেভেলপমেন্টে খুবই কমন একটা সমস্যা, প্রায়ই হয়। কয়েকদিন আগে আমিও এই সমস্যায় পরেছিলাম। একটা মডিউলে ছোট একটা পরিবর্তন আনতে গিয়ে আরো ৫টা মডিউলে হাত দেয়া লেগেছিল, যাদের সাথে কোন রকম সংযোগ থাকার কথা ছিল না। ফ্লো ঠিক ঠাক মত সাজিয়ে কিভাবে এই সমস্যার সমাধান করা যায় ভিডিওতে দেখানো হয়েছে। লিঙ্ক নিচে দেয়া আছে।\nএছাড়াও সাবেক উইনিক্স মেম্বার ও গো প্রোগ্রামিং ল্যাঙ্গুয়েজ এর জনক Rob Pike তার \u0026ldquo;Concurrency Is Not Parallelism\u0026rdquo; টপিক নিয়ে কথা বলার সময়ও এরকম কিছু বলেছেনঃ\n“If you looked at the programming languages of today, you probably get this idea that the world is object-oriented. But it\u0026rsquo;s not! It\u0026rsquo;s actually parallel.\nYou got everything from the lowest level like machines and up through networking and so on, then all the way up to users, planets, the universe, etc. All these things are happening simultaneously in the world. And yet the computing tools that we have are not really good at expressing that worldview.”\n\u0026ndash; Rob Pike\nআসলে ভার্সিটি সিলেবাসে ওই রকম প্রোজেক্ট ভিত্তিক প্র্যাকটিকাল কিছু নেই বলে এই সমস্যা গুলো তখন বোঝা যায় না। এবং OOP সম্পর্কে একটা ভুল ধারণা নিয়েই আমরা বেশীর ভাগ কম্পিউটার সায়েন্স গ্র্যাজুয়েট ইঞ্জিনিয়ার হয়ে বের হই। পরবর্তীতে একটু মাঝারি কিংবা বড় সফটওয়্যারে কাজ করতে গেলে ঠিক মত সিস্টেম ডিজাইন করতে পারি না। কোন রকম if-else ব্যবহার করে সিস্টেম বানিয়ে ফেলি, তারপর যখন নতুন ফীচার সফটওয়্যারে যোগ করা লাগে ঐ পরিস্থিতিতে চলমান সফটওয়্যারের কোড পরিবর্তন করতে গিয়ে হিমশিম খাই। কারণ ঐ সফটওয়্যার দিয়ে কোম্পানির হাজার হাজার টাকার ব্যবসা চলছে, একটু এদিক সেদিক হলেই ডেভেলপারের ১২টা বেজে যাবে। এই সময় ব্যাপারটা এমন হয়ে দাঁড়ায় যে, আমার বানানো সফটওয়্যারকে আমি নিয়ন্ত্রণ করতে পারছি না, উল্টা আমার বানানো সফটওয়্যারটাই আমাকে নিয়ন্ত্রণ করতে চাচ্ছে। অনেকটা মা-বাবার অবাধ্য সন্তানের মত।\nভার্সিটিতে যেটা শিখাচ্ছে সেটা প্রাথমিক শিক্ষা এবং অবশ্যই অনেক গুরুত্বপূর্ণ। প্রাথমিক কম্পিউটার সায়েন্স শিখা মানেই যে সব জেনে গেলাম, ব্যাপারটা এরকম না। প্রাথমিক শিক্ষার পরেও নিজের ইচ্ছায় এ বিষয়গুলো নিয়ে ঘাটাঘাটি করতে হবে, জানতে হবে, একটু জানলে আরো বেশী জানার আগ্রহ থাকতে হবে। চাকরীজীবনে ঢুকেও আমাদের অনেক নতুন নতুন বিষয় জানা লাগে, শেখা লাগে। শেখার আসলেই কোন শেষ নেই। ২-১ যুগ আগে হয়ত শেখা কষ্ট ছিল.. ভাল বই কম ছিল, থাকলে কোনটা ভাল বই জানা ছিল না, ইন্টারনেট ব্যবহার কষ্টকর ছিল, সেখানেও এত রিসোর্স ছিল না। কিন্তু এখন শেখার প্লাটফর্ম অনেক সহজ, যে কোন কিছুই একটু ইন্টারনেটে সার্চ দিলেই পাওয়া যায়। Google, Quora, StackOverflow, Reddit, বিভিন্ন রকমের প্রোগ্রামিং ব্লগ অনেক অনেক রিসোর্স এখন সহজলভ্য!\nতাই ভুল ভাবে OOP না বুঝে আমরা যেন ভবিষ্যতে ঘাড় ত্যাড়া সফটওয়্যার না বানাই সেদিকে খেয়াল রাখতে হবে। সেক্ষেত্রে SOLID principles জেনে নিলে এ সকল সমস্যা ভালভাবে সমাধান করা যাবে আশা করা যায়। ইচ্ছা আছে, উদাহরণ সহ SOLID এর প্রত্যেকটা প্রিন্সিপ্যাল নিয়ে ব্লগ সিরিজ লেখার। আল্লাহ্‌ ভরসা!\n🎬 Video links Uncle Bob’s talk on SOLID principle Rob Pike - \u0026lsquo;Concurrency Is Not Parallelism\u0026rsquo; ","permalink":"https://aniskhan001.me/tech/oop-%E0%A6%A5%E0%A7%87%E0%A6%95%E0%A7%87-%E0%A6%95%E0%A6%BF-%E0%A6%B6%E0%A6%BF%E0%A6%96%E0%A6%B2%E0%A6%BE%E0%A6%AE/","summary":"\u003cfigure class=\"align-center big-picture\"\u003e\n    \u003cimg loading=\"lazy\" src=\"/img/tech/oop.jpeg#center\"\n         alt=\"A sample program of mine, but not directly related to OOP or SOLID\"/\u003e \u003cfigcaption\u003e\n            \u003cp\u003eA sample program of mine, but not directly related to OOP or SOLID\u003c/p\u003e\n        \u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eআমরা যারা ভার্সিটিতে কম্পিউটার সায়েন্স বা অন্যান্য ইঞ্জিনিয়ারিং বিষয়ে পড়াশুনা করে এসেছি বা এখনো করছি, মোটামুটি সবারই Object Oriented Programming বা OOP শিখতে হয়েছে। যেখানে Encapsulation, Inheritence, Polymorphism ইত্যাদি বিষয়গুলো থাকে। এবং প্রায় সময়ই OOP বোঝার জন্য কিছু সাধারণ উদাহরণ আমরা দেখে এসেছি.. যেমন Vehicle নামে একটা class. এখান থেকে কমন জিনিসগুলো যেমন চাকা, বডি, ইত্যাদি নিয়ে গাড়ি, বাস, ট্রাক ইত্যাদি object হতে পারে। গাড়ির ক্লাস থেকে আবার কিছু অবজেক্ট রং পরিবর্তন করে লাল গাড়ি, নীল গাড়ি, সবুজ গাড়ি ইত্যাদি হতে পারে। অনেকে পরিবারের সম্পর্ক দিয়ে বোঝার চেষ্টা করে.. যেমন দাদা থেকে বাবা, বাবা থেকে তুমি, থাক ওইদিকে আর না গেলাম।\u003c/p\u003e","title":"OOP থেকে কি শিখলাম? 🎯"},{"content":"Motivation For a small Kubernetes cluster, I needed a minimal dashboard where logs from all the running applications in the Kubernetes environment can be viewed or grepped from one place.\nI thought about ELK (Elastic + Logstash + Kibana) first, but then I realized my small cluster has a config of only 2 nodes with a total 2 vCPU and 4GB RAM, which wouldn’t be a wise option for Elastic to run since it requires more resources to run smoothly. I wanted to use as few resources as possible to have the logging architecture setup.\nLet’s see if the FIG ➡ (FluentBit + InfluxDB + Grafana) stack can do for us!\nThe FIG logging architecture in Kubernetes\nThe High-Level Architecture Fluent Bit used as the log processor which will collect all the stdout from all the pods in Kubernetes and forward them to a data storage. Fluent Bit** **is a part of the Fluentd Ecosystem but uses much much fewer resources. It creates a tiny little footprint on your system’s memory. In the Kubernetes environment, it is installed as a DaemonSet resource.\nInfluxDB will be used as data storage so that it can hold the data forwarded by Fluent Bit. InfluxDB is a popular time-series database designed to handle high write and query loads. Since we will store lots of application logs in real-time, I think Influx is a very good option here.\nGrafana will provide supports to create dashboards and panels where we can query over the data from InfluxDB.\nPreparing the cluster We will be using Helm to package and deploy required applications and dependencies into the cluster. Official Helm charts for both Fluent Bit, InfluxDB and Grafana are available on GitHub or Helm Hub.\nThe default settings and config values provided by Helm charts won’t work out of the box for us. So I made a GitHub repository that contains the official Fluent Bit charts, InfluxDB charts, Grafana charts, and a few config adjustments over those. We will be using this directory to deploy all of our apps. Don’t worry I will explain below which configs were adjusted to have our FIG stack!\n😉 Pro tip: Try to use Helm 3 as it doesn’t install tiller in your cluster. But if version 2 of Helm is an absolute necessity, look at the Tillerless Helm plugin. You can read more here about why the tiller should not be installed in a cluster.\nDeploy the FIG stack To keep our deployments separated from other running applications in Kubernetes, let’s create a namespace called ‘monitoring’ or a fancy name of your choice.\nkubectl create ns monitoring Since we will be using our GitHub repo, let’s clone this to the local machine.\ngit clone https://github.com/aniskhan001/fig-stack cd fig-stack 1. Deploy \u0026amp; Configure InfluxDB helm upgrade --install influxdb influxdb -n monitoring There are not many configurations needed for InfluxDB, but the credentials and DB name. We will need to create a database to store the logs forwarded by Fluent Bit. In the influxdb/values.yml file, we provide the DB name using an env variable:\nenv: - name: INFLUXDB_DB value: \u0026#34;fluentbit\u0026#34; That’s it. We are done with InfluxDB! You can continue to step 2.\nNote: we are not creating a username and password for this demo. However, in a production environment, we should always create a username and password to ensure DB security.\nTo have authentication, in the influxdb/values.yml file set these values:\nsetDefaultUser.enabled: true setDefaultUser.user.username: my_user setDefaultUser.user.password: my_pass If the value of setDefaultUser.user.password is not given it will generate a random password for us and store it as a Kubernetes secret resource.\nAlso, the persistence is disabled for this demo so that we don’t create a pvc for this. The data won’t persist if the InfluxDB instance fails at some point.\npersistence.enabled: false Don’t forget to enable persistence in a production environment.\n2. Deploy \u0026amp; Configure Fluent Bit helm upgrade --install fluent-bit fluent-bit -n monitoring The configuration here for Fluent Bit is mainly to tell it to use InfluxDB as the backend. In fluent-bit/values.yml we define it in the ‘backend’ section\nbackend: type: influx influx: host: influxdb port: 8086 database: fluentbit sequence_tag: _seq Then we will need to configure the InfluxDB output plugin in Fluent Bit’s configuration. In the fluent-bit/templates/config.yml file:\ndata: fluent-bit-service.conf: | ... ... [OUTPUT] Name influxdb Match * Host {{ .Values.backend.influx.host }} Port {{ .Values.backend.influx.port }} Database {{ .Values.backend.influx.database }} Sequence_Tag {{ .Values.backend.influx.sequence_tag }} 3. Deploy \u0026amp; Configure Grafana helm upgrade --install grafana grafana -n monitoring After Grafana is installed, let’s port-forward the instance to the local machine to continue for additional settings.\n# get the grafana pod name export GF_POD_NAME=$(kubectl get pod -n monitoring -l app=grafana -o jsonpath=\u0026#34;{.items[0].metadata.name}\u0026#34;) # port forward kubectl -n monitoring port-forward $GF_POD_NAME 3000 Go to: http://localhost:3000/login\nLogin with: user = admin \u0026amp; pass = badmin\nCause I have set the values of adminPassword in grafana/values.yml for this quick demo! 😬 This is not recommended. You can set a default password here, or just leave it blank to let Helm create a random password during installation.\nThen head over to http://localhost:3000/datasources/new to add InfluxDB as a new data source and confirm these below settings:\nURL: http://influxdb:8086/ Access: Server (Default) Database: fluentbit Pressing the “Save \u0026amp; Test” button should save the data source.\nAnd thus we are ready to run our queries!\nExample query and dashboard select everything (*) from a measurement in InfluxDB\nUsing InfluxQL, you can query and grep only the things that are meaningful to your needs. The Influx Query Language is a lot similar to MySQL or other SQL queries.\nShow all logs from a particular container\nThat’s a quick setup walkthrough for a lesser-known FIG stack. Initially, I needed a minimal logging setup for viewing application logs and dived into it. While it does serve my purpose; but now, I think this setup can be used to monitor lots of things using the powerful Influx Query Language. For that, the applications should provide meaningful logs to the system.\nI hope you enjoyed the walkthrough. Please let me know any questions or suggestions if you have. Also, don’t forget to create issues or send PR to the repo if things need correction and/or enhancement. I’ll be happy to review and add things if necessary.\nResources The codebase for deployment: https://github.com/aniskhan001/fig-stack\nFluent Bit output plugin config: https://docs.fluentbit.io/manual/v/1.3/output/influxdb\nLearn the InfluxDB configuration: https://docs.influxdata.com/influxdb/v1.7/administration/config/\nHow InfluxSQL works: https://docs.influxdata.com/influxdb/v1.7/query_language/spec/\n","permalink":"https://aniskhan001.me/tech/logging-with-fluent-bit-influxdb-fig/","summary":"\u003ch2 id=\"motivation\"\u003eMotivation\u003c/h2\u003e\n\u003cp\u003eFor a small Kubernetes cluster, I needed a minimal dashboard where logs from all the running applications in the Kubernetes environment can be viewed or grepped from one place.\u003c/p\u003e\n\u003cp\u003eI thought about ELK (Elastic + Logstash + Kibana) first, but then I realized my small cluster has a config of only 2 nodes with a total 2 vCPU and 4GB RAM, which wouldn’t be a wise option for Elastic to run since it requires more resources to run smoothly. I wanted to use as few resources as possible to have the logging architecture setup.\u003c/p\u003e","title":"Logging with Fluent Bit \u0026 InfluxDB 🪵"},{"content":" \u0026quot;If you\u0026rsquo;re building Docker images on your laptop for tagging release, be in shame, and then change your behavior\u0026quot; - Kelsey Hightower, 2018\nThat\u0026rsquo;s right! If you are building Docker images in your local machine, you are doing it wrong. We don\u0026rsquo;t want to build anything on our laptop. When we are tagging a new release for production, staging, or even for a dev environment, the build should trigger automatically to save time and avoid the hassle. But Docker builds in a CI environment might not be faster than our local machine if we don\u0026rsquo;t configure it properly. In this write-up, I\u0026rsquo;ll try to share my experience on how I achieved more speed building Docker images in a CI environment.\nHow do we do it from local machine? 🛠 We don\u0026rsquo;t want to be in shame. But let\u0026rsquo;s see what is it like building and pushing a Docker image from local machines to Docker registries.\nDocker uses layer caches to build. If we are building an image from a Dockerfile it will try to check if it already has cache present in the machine. If not it will build the image without any caching, but it will take a bit longer.\nDocker image building flow\nBuilding docker images in the local machines take much less time to finish if we have built the same image before. That\u0026rsquo;s because Docker reuses the layers from previously built images which are currently present in our machine.\nWhat\u0026rsquo;s up with CI environments? 🏁 In a CI environment, things work a bit differently. Because each time a new machine spawns to run a corresponding job, and then destroy/clean up everything after the job is finished. Even if we are building the same image, again and again, Docker cannot use the layers from the previously built images since that was on a separate machine. So the above picture looks like this in a CI environment:\nDocker image building flow when the image doesn\u0026rsquo;t exist\nIn this scenario, there\u0026rsquo;s no \u0026ldquo;yes\u0026rdquo; path, the image doesn\u0026rsquo;t exist by default. So, there\u0026rsquo;s only one way forward to the build stage. But the process can speed up.\nHow can we achieve the speed? 🚅 To fix the issue in the above scenario, we will need a way to instruct Docker to use the cache from the previous build. We can just simply pull the latest image from our docker repository in the runner machine for each job before building the image. So that we can use the cache of the previously built image.\nSpeed up Docker image building process by pulling the image first\nTo use the cache from the previously built image we can use the --cache-from option on the build command. This option will take an image name from where we want to use it as the cache source.\nConsider this Dockerfile:\nFROM python:3.8 ENV TZ=Asia/Dhaka RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026amp;\u0026amp; echo $TZ \u0026gt; /etc/timezone WORKDIR /app ADD requirements.txt . RUN pip install -r requirements.txt COPY ./code . EXPOSE 5000 The process for building this Dockerfile could be the following:\nPull the image with the latest tag Build the image with --cache-from flag to use cache from previously built layers, \u0026amp; create both the latest tag and our chosen tag Push both of the tags # Step 1 docker pull docker.myrepo.com/awesome-image:latest # Step 2 docker build . --cache-from docker.myrepo.com/awesome-image:latest -t docker.myrepo.com/awesome-image:latest -t docker.myrepo.com/awesome-image:1.4.7 # Step 3 docker push docker.myrepo.com/awesome-image What If?.. we use multi-stage Dockerfile 🐳 For multi-stage Dockerfiles, usually, there are one or more builder stages where we build the application. During the build process, the container environment can be polluted by build dependencies which might not be required for the application to run. So we pull a fresh base image in the final stage and copy over only the application files to the final stage from the previous builder stage. Thus the final build couldn\u0026rsquo;t really use the layer cache from the builder stage since the final stage is based on a different image. When some project files change it will always try to build the image and for the changes detected it won\u0026rsquo;t be able to use the cache from the latest tag. So, what do we do in this case?\nHere\u0026rsquo;s a Dockerfile with multi-stage build:\n# BUILDER STAGE ARG GO_VERSION=1.12.7 FROM golang:${GO_VERSION}-alpine AS builder # Create the user and group files # that will be used in the running container # to run the process as an unprivileged user RUN mkdir /user \u0026amp;\u0026amp; \\ echo \u0026#39;nobody:x:65534:65534:nobody:/:\u0026#39; \u0026gt; /user/passwd \u0026amp;\u0026amp; \\ echo \u0026#39;nobody:x:65534:\u0026#39; \u0026gt; /user/group WORKDIR /src COPY ./ ./ RUN CGO_ENABLED=0 GOOS=linux go build -a -o /app . # FINAL STAGE FROM scratch AS final COPY --from=builder /user/group /user/passwd /etc/ COPY --from=builder /app /app USER nobody:nobody ENTRYPOINT [\u0026#34;/app\u0026#34;] The build process for multi-stage build would be:\nPull the image with the builder tag Build and tag a new builder image using --target option to set the builder stage and use --cache-from option to use the layer caching. Build the final image by using cache from the builder stage and tag with the latest \u0026amp; our favorite tag. Push both builder, latest, and our favorite tags. # Step 1 docker pull docker.myrepo.com/awesome-image:builder # Step 2 docker build . --target builder --cache-from docker.myrepo.com/awesome-image:builder -t docker.myrepo.com/awesome-image:builder # Step 3 docker build . --cache-from docker.myrepo.com/awesome-image:builder -t docker.myrepo.com/awesome-image:latest -t docker.myrepo.com/awesome-image:1.4.7 # Step 4 # pushes \u0026#39;builder\u0026#39;, \u0026#39;latest\u0026#39; \u0026amp; \u0026#39;1.4.7\u0026#39; tags docker push docker.myrepo.com/awesome-image Cool! But can we do some magic? 🎩 Yes, but depends on the tool. Some CI tool supports special commands or configurations to have the cache from the previous build automatically. For example, CircleCI has a configuration like this below:\nour_job_name: machine: docker_layer_caching: true That automatically does all the trick that we have done manually above.\nI tried to share how I approached and solved the issue of Docker build speed in the CI environment. Hope the readers will find these simple tips helpful and can use them to improve their build pipelines.\n","permalink":"https://aniskhan001.me/tech/speed-up-docker-build-ci-environment/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://youtu.be/kOa_llowQ1c?t=500\"\u003e\u0026quot;\u003cem\u003eIf you\u0026rsquo;re building Docker images on your laptop for tagging release, be in shame, and then change your behavior\u003c/em\u003e\u0026quot;\u003c/a\u003e - Kelsey Hightower, 2018\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eThat\u0026rsquo;s right! If you are building Docker images in your local machine, you are doing it wrong. We don\u0026rsquo;t want to build anything on our laptop. When we are tagging a new release for production, staging, or even for a dev environment, the build should trigger automatically to save time and avoid the hassle. But Docker builds in a CI environment might not be faster than our local machine if we don\u0026rsquo;t configure it properly. In this write-up, I\u0026rsquo;ll try to share my experience on how I achieved more speed building Docker images in a CI environment.\u003c/p\u003e","title":"Speed up Docker build in CI environment 🏎"},{"content":"Motivation 🌌 🌠 Recently I worked on a MeteorJS project. The live version of the app is hosted on Galaxy and there was no staging environment for this one. So we needed to deploy another instance of this app in a staging environment. The codebase was hosted on GitLab and we have a shared cluster of MongoDB in mLab. While we wanted to run the staging environment efficiently, we also wanted to make sure the deployment is as cost-effective as we can.\nFinding 🆓 options While searching for free options, I have found these best possible options:\nHeroku is one of the most used PaaS currently which supports deploying app automatically from the GitHub repository. However, deploying from other code repositories like GitLab, Bitbucket etc aren’t supported yet.\nAt the time of this writing, they support 4 different deployment methods:\nThese are: Heroku repo (GIT), GitHub, Dropbox, and Container Registry Heroku Deployment Methods\nWe would also need a runner for the CD to run the job that checks the successful build of the codebase. GitLab provides shared runners for one repository for free! How I won the scenario? 🏆 Ever wished for a deploy button? Pressing that would be fun!\nthe glorious deploy button\nBut in our system, we don’t even need that button to press. Here’s how:\n1. Set up Heroku API Key First, we will need an app on Heroku. If you don’t have an app yet, create one. The app name will be needed later.\nThen, we will need to set up the API key so that it can connect to the runner.\nGo to dashboard.heroku.com/account to get the Heroku API Key. Place the Heroku API Key under Settings ➔ CI / CD ➔ Variables GitLab CI/CD Settings\nWe saved the key in a variable named HEROKU_API_KEY, we will use it later.\n2. Write the GitLab deployment script Now it’s time to write the .gitlab-ci.yml file. My deployment script goes like this:\nstaging: type: deploy script: - apt-get update -qy - apt-get install -y ruby-dev - gem install dpl - dpl --provider=heroku --app=my_app --api-key=$HEROKU_API_KEY only: - master As we can see, in the script section of the above snippet, we are installing ruby and a ruby gem called dpl. It’s a deploy tool made by Travis and can be used in GitLab as well. Then we are passing:\nprovider name as heroku --provider=heroku the app name of our heroku app --app=my_app the api-key --api-key=$HEROKU_API_KEY which we have saved earlier Finally we are defining which branch changes should trigger the deployment.\n3. Setup GitLab Runner To run the pipeline we will need to install a runner (machine) which will run scripts and other programs to make sure our app is building successfully.\nThis doc explains how we can install the runner either on our local machine or in Docker: docs.gitlab.com/runner/install\n4. Install Buildpack on Heroku (optional) for Meteor app I’d recommend using the Meteor Buildpack Horse for Meteor app with Heroku which provides easy configuration to start the app. All we need to do is to define the ROOT_URL and MONGO_URL.\nHeroku buildpack settings\nAnd need to place the URL of this buildpack to Heroku, of course! Other available environment vars can be found here: github.com/AdmitHub/meteor-buildpack-horse#environment\nI hope this short guide is helpful for beginners. Experts, please let me know suggestions and/or room for improvements if there’s any. Cheers!\n","permalink":"https://aniskhan001.me/tech/easy-continuous-delivery-for-meteor-app-with-gitlab-heroku/","summary":"\u003ch2 id=\"motivation--\"\u003eMotivation 🌌 🌠\u003c/h2\u003e\n\u003cp\u003eRecently I worked on a MeteorJS project. The live version of the app is hosted on \u003ca href=\"https://www.meteor.com/hosting\"\u003eGalaxy\u003c/a\u003e and there was no staging environment for this one. So we needed to deploy another instance of this app in a staging environment. The codebase was hosted on GitLab and we have a shared cluster of MongoDB in mLab. While we wanted to run the staging environment efficiently, we also wanted to make sure the deployment is as cost-effective as we can.\u003c/p\u003e","title":"Easy Continuous Delivery for Meteor app with GitLab + Heroku"},{"content":"December 2017, at work, I had to deploy a micro-service very very quickly to support the core service of ours. The framework I used for this one was Sanic, (a micro-framework written in Python 3.5 with Async support). So, I get the python image first along with dependencies in a requirements.txt file. This is how it went:\nFROM python:3.6 ENV PYTHONUNBUFFERED 1 ENV TZ=Asia/Dhaka RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026amp;\u0026amp; echo $TZ \u0026gt; /etc/timezone RUN mkdir /app ADD requirements.txt ./app/ WORKDIR /app RUN pip install -r requirements.txt COPY ./code ./app EXPOSE 5000 After building this Dockerfile, the size of the image was 780 MB!\nSince I was in a hurry, (translation: I actually didn’t have good optimization knowledge in Docker, LOL) I just stared on that monstrous size for a small service and let it pass on to production. Then when I got time recently to think about optimization, gathered some knowledge from online and rewrote the file to this:\nFROM alpine:3.7 RUN mkdir /app WORKDIR /app COPY requirements.txt ./ RUN apk add --no-cache python3 python3-dev build-base \u0026amp;\u0026amp; \\ python3 -m ensurepip \u0026amp;\u0026amp; \\ rm -r /usr/lib/python*/ensurepip \u0026amp;\u0026amp; \\ pip3 install --upgrade pip setuptools \u0026amp;\u0026amp; \\ pip3 install -r requirements.txt \u0026amp;\u0026amp; \\ apk del python3-dev build-base \u0026amp;\u0026amp; \\ rm -r /root/.cache ENV PYTHONUNBUFFERED 1 ENV TZ=Asia/Dhaka RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026amp;\u0026amp; echo $TZ \u0026gt; /etc/timezone COPY ./code ./ CMD [\u0026#34;python3\u0026#34;, \u0026#34;app.py\u0026#34;] EXPOSE 5000 This one looks messy, but far more optimized. After building the image with this new Dockerfile it is only 79 MB now!\nSo this is how I reduced the image size First of all, we were getting a standard python image with lots of pre-installed tools which we might not require. Instead, I’m getting an alpine based image for the second example and installing only things which are required to run this particular app.\n(extra read: is alpine worth it?)\n# nope, nope, nope FROM python:3.6 # yeah! FROM alpine:3.7 Then in the next section, notice I’m running multiple statements at once to have fewer layers. Separate RUN commands create separate layers to an image which can potentially increase the size.\n# Multiple RUN at once, for glory! RUN apk add --no-cache python3 python3-dev build-base \u0026amp;\u0026amp; \\ python3 -m ensurepip \u0026amp;\u0026amp; \\ rm -r /usr/lib/python*/ensurepip \u0026amp;\u0026amp; \\ pip3 install --upgrade pip setuptools \u0026amp;\u0026amp; \\ pip3 install -r requirements.txt \u0026amp;\u0026amp; \\ apk del python3-dev build-base \u0026amp;\u0026amp; \\ rm -r /root/.cache But there’s a drawback to this method as well. Once we change something to this RUN command, a rebuild would take more time since it won’t be able to take its state from the previous layer. But once again, we generally don’t add or remove packages often, so I guess this is admissible.\nLast but not least, it’s always better to clean up rm -r files and directories which aren’t required by the app. Also, be sure to add unnecessary files and directories inside .dockerignore as well so that it won’t go inside the image.\nWhy does it matter? Less image size means less bandwidth cost. Imagine a CD pipeline that does frequent deployments where it can save more server costs Less room for security breach since we have fewer tools and dependency packages inside the image to explore Faster deployments (obviously) with small-sized image To readers, I’m continuously learning Docker through working with it, and I found this might be an interesting story to share with everyone. Let me know your thoughts on this and share if you have any suggestions or any more tip to make Dockerfile even more optimized. Thanks for reading my story!\n","permalink":"https://aniskhan001.me/tech/how-i-reduced-the-size-of-a-docker-image/","summary":"\u003cp\u003eDecember 2017, at work, I had to deploy a micro-service very very quickly to support the core service of ours. The framework I used for this one was \u003ca href=\"https://github.com/sanic-org/sanic\"\u003eSanic\u003c/a\u003e, (\u003cem\u003ea micro-framework written in Python 3.5 with Async support\u003c/em\u003e). So, I get the python image first along with dependencies in a \u003ccode\u003erequirements.txt\u003c/code\u003e file. This is how it went:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Dockerfile\" data-lang=\"Dockerfile\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003eFROM\u003c/span\u003e\u003cspan style=\"color:#0ff;font-weight:bold\"\u003e python:3.6\u003c/span\u003e\u003cspan style=\"color:#f00\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f00\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003eENV\u003c/span\u003e PYTHONUNBUFFERED \u003cspan style=\"color:#ff0;font-weight:bold\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f00\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f00\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f00\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003eENV\u003c/span\u003e TZ=Asia/Dhaka\u003cspan style=\"color:#f00\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f00\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003eRUN\u003c/span\u003e ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026amp;\u0026amp; \u003cspan style=\"color:#fff;font-weight:bold\"\u003eecho\u003c/span\u003e $TZ \u0026gt; /etc/timezone\u003cspan style=\"color:#f00\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f00\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f00\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003eRUN\u003c/span\u003e mkdir /app\u003cspan style=\"color:#f00\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f00\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003eADD\u003c/span\u003e requirements.txt ./app/\u003cspan style=\"color:#f00\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f00\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003eWORKDIR\u003c/span\u003e\u003cspan style=\"color:#0ff;font-weight:bold\"\u003e /app\u003c/span\u003e\u003cspan style=\"color:#f00\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f00\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003eRUN\u003c/span\u003e pip install -r requirements.txt\u003cspan style=\"color:#f00\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f00\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003eCOPY\u003c/span\u003e ./code ./app\u003cspan style=\"color:#f00\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f00\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fff;font-weight:bold\"\u003eEXPOSE\u003c/span\u003e\u003cspan style=\"color:#0ff;font-weight:bold\"\u003e 5000\u003c/span\u003e\u003cspan style=\"color:#f00\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter building this Dockerfile, the size of the image was \u003cstrong\u003e780 MB!\u003c/strong\u003e\u003c/p\u003e","title":"How I reduced the size of a Docker image"},{"content":" \u0026ldquo;প্রোগ্রামিং কন্টেস্ট তো বাচ্চারা করে।\u0026rdquo;\nবলেছিলেন এক বড় ভাই\n\u0026ldquo;এইসব কন্টেস্ট-ফন্টেস্ট করলে তোমারে কে চাকরী দিবে?\u0026rdquo;\nবলেছিলেন আরেক বড় ভাই\n\u0026ldquo;প্রোগ্রামিং কন্টেস্ট করলে আসলে আমাদের মাথা একটা নির্দিষ্ট চিন্তার বলকে আটকে যায়\u0026rdquo;\nবলেছিল এক সহপাঠী\nআসলে তাদের কেউই উপলব্ধি করতে পারেনি কন্টেস্ট প্রোগ্রামিং কি জিনিস! কেউ হয়তো ইতিমধ্যেই কিছুটা বুঝেছে, কেউ হয়তো পারবে কোনও একদিন। 🙂\n২০১২ তে যখন প্রোগ্রামিং কন্টেস্ট শুরু করি তখন এইসব শুনেছিলাম। তারপরেও থামিনি। কারণ একটাই, ভাল লাগতো। ওইসব চাকরী-বাকরি বা কোন ফায়দার কথা তখনও চিন্তায় আসেনি। হয়তো খুব ভাল কিছু করে দেখাতে পারিনি। বেশী সময় দিতে পারিনি, কারণ নানা কাজ করতে হয়েছে। তবে বলতে পারবো চেষ্টা করেছি এবং অনেক কিছু শিখেছি। এবং টের পাই এর গুরুত্ব। সফটওয়্যারের কোন বাগ খুঁজে বের করা, কি রকম টেস্ট কেসে প্রোগ্রাম আটকে যেতে পারে, একটা নির্দিষ্ট টাস্ক সম্পন্ন করতে হাজার হাজার সিপিইউ অপারেশন না করে কিভাবে কয়েকটা অপারেশনে করা যায়, ইত্যাদি অনেকেই মাথায় রাখে না। যেটা মাথায় রাখে একজন কন্টেস্ট প্রোগ্রামার। আর এই জন্যই তাদের চাহিদা অনেক অনেক বেশী। যেখানে অনেকের স্বপ্ন থাকে Google, Microsoft বা Facebook এ যোগ দেয়া, সেখানে এই কোম্পানিগুলোই এইসব প্রোগ্রামারদের খুঁজে খুঁজে নিয়ে যায়।\nআজকের ICPC Dhaka Regional Final এ ১ম, ২য় ও ৩য় স্থান অধিকারকারীদের জন্য ছিল যথাক্রমে ৭৫০০০ টাকা, ৬০০০০ টাকা ও ৪৫০০০ টাকার প্রাইজমানি। ভবিষ্যতে এই পুরস্কারের পরিমান আরো অনেক বাড়বে বোঝাই যাচ্ছে, যে হারে এখনকার কন্টেস্টগুলোতে স্পন্সর পাওয়া যায়! টাকার কথা কেন বললাম? গর্ব বা শুনানোর জন্য কিংবা লোভ দেখানোর জন্য না, বরং অনুপ্রেরনার জন্য। প্রথম যখন আমরা কন্টেস্টে যেতাম, তখন এত কিছু ছিল না, উপস্থিতিটাই আমাদের কাছে অনেক বেশী ছিল। আর এখন বোঝাই যায় উত্তেজনাটা কি পরিমানে বেড়েছে। প্রথম দিকে দেখতাম প্রিলিমিনারি রাউন্ডে অংশ নিত ২০০-৩০০ টীম। আর এইবার ছিল ১০০০ এরও বেশী টীম! ভাবা যায়? ভবিষ্যতে আরো গুনিতক/সূচক আকারে বাড়বে।\nবাহিরের দেশে প্রোগ্রামিং কন্টেস্টের আরেক নাম হচ্ছে “স্পোর্টস প্রোগ্রামিং”। বাংলাদেশেও এটা হয়ে যাচ্ছে, বিজয়ীদের হাতে বড় বড় পে-চেক দেখলে তাই মনে হয়। সর্বোপরি, এইটাও এক ধরণের খেলা। অদূর ভবিষ্যতে আমাদের দেশের মানুষ শুধুমাত্র \u0026ldquo;সাব্বিরের ছক্কা\u0026rdquo; আর \u0026ldquo;রুবেলের বোল্ড\u0026rdquo; দেখলেই উল্লাস করবে না। BUET, SUST, JU এর মত ভার্সিটিরা যখন ICPC World Final এ গিয়ে চ্যাম্পিয়ন ট্রফি ছিনিয়ে নিয়ে আসবে তখন দেশবাসী বিভিন্ন যায়গায় মিছিল বের করবে। জানি স্বপ্ন, তারপরেও দেখতে দোষ কি? বলে রাখা ভাল এই “স্পোর্টস প্রোগ্রামিং” এ আমরা বরাবর ইন্ডিয়াকে হারিয়ে আসছি গত এক যুগেরও বেশী সময় ধরে। আর পাকিস্তানের কোন টীমকে এখন পর্যন্ত নজরে পরেনি। :3\nসম্মানিত কায়কোবাদ স্যার কিছুদিন আগে IUT তে বলেছিলেন, “ক্রিকেট খেলায় আন্দাজে ব্যাট চালালে ছক্কা হতে পারে, আন্দাজে বল মারলে আউট ও হতে পারে। কিন্তু কন্টেস্ট প্রোগ্রামিং এ ১০০ তে ১০০ ভাগ কোড হলেই কেবল সেইটা ACCEPTED হতে পারে। কাজেই এইটা দক্ষতার সাথেও ভাগ্যের খেলা না, এইটা শুধুমাত্রই দক্ষতার খেলা!”\nimported from my old Facebook post\n","permalink":"https://aniskhan001.me/life/%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82-%E0%A6%95%E0%A6%A8%E0%A7%8D%E0%A6%9F%E0%A7%87%E0%A6%B8%E0%A7%8D%E0%A6%9F-%E0%A6%AC%E0%A6%BE%E0%A6%9A%E0%A7%8D%E0%A6%9A%E0%A6%BE%E0%A6%B0%E0%A6%BE-%E0%A6%95%E0%A6%B0%E0%A7%87/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;প্রোগ্রামিং কন্টেস্ট তো বাচ্চারা করে।\u0026rdquo;\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eবলেছিলেন এক বড় ভাই\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;এইসব কন্টেস্ট-ফন্টেস্ট করলে তোমারে কে চাকরী দিবে?\u0026rdquo;\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eবলেছিলেন আরেক বড় ভাই\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;প্রোগ্রামিং কন্টেস্ট করলে আসলে আমাদের মাথা একটা নির্দিষ্ট চিন্তার বলকে আটকে যায়\u0026rdquo;\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eবলেছিল এক সহপাঠী\u003c/p\u003e\n\u003cp\u003eআসলে তাদের কেউই উপলব্ধি করতে পারেনি কন্টেস্ট প্রোগ্রামিং কি জিনিস! কেউ হয়তো ইতিমধ্যেই কিছুটা বুঝেছে, কেউ হয়তো পারবে কোনও একদিন। 🙂\u003c/p\u003e\n\u003cp\u003e২০১২ তে যখন প্রোগ্রামিং কন্টেস্ট শুরু করি তখন এইসব শুনেছিলাম। তারপরেও থামিনি। কারণ একটাই, ভাল লাগতো। ওইসব চাকরী-বাকরি বা কোন ফায়দার কথা তখনও চিন্তায় আসেনি। হয়তো খুব ভাল কিছু করে দেখাতে পারিনি। বেশী সময় দিতে পারিনি, কারণ নানা কাজ করতে হয়েছে। তবে বলতে পারবো চেষ্টা করেছি এবং অনেক কিছু শিখেছি। এবং টের পাই এর গুরুত্ব। সফটওয়্যারের কোন বাগ খুঁজে বের করা, কি রকম টেস্ট কেসে প্রোগ্রাম আটকে যেতে পারে, একটা নির্দিষ্ট টাস্ক সম্পন্ন করতে হাজার হাজার সিপিইউ অপারেশন না করে কিভাবে কয়েকটা অপারেশনে করা যায়, ইত্যাদি অনেকেই মাথায় রাখে না। যেটা মাথায় রাখে একজন কন্টেস্ট প্রোগ্রামার। আর এই জন্যই তাদের চাহিদা অনেক অনেক বেশী। যেখানে অনেকের স্বপ্ন থাকে Google, Microsoft বা Facebook এ যোগ দেয়া, সেখানে এই কোম্পানিগুলোই এইসব প্রোগ্রামারদের খুঁজে খুঁজে নিয়ে যায়।\u003c/p\u003e","title":"প্রোগ্রামিং কন্টেস্ট কি বাচ্চারাই করে?"}]