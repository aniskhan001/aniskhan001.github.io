<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>docker on Anis Khan</title>
    <link>https://aniskhan001.me/tags/docker/</link>
    <description>Recent content in docker on Anis Khan</description>
    <image>
      <url>https://aniskhan001.me/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://aniskhan001.me/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 14 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://aniskhan001.me/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Speed up Docker build in CI environment üèé</title>
      <link>https://aniskhan001.me/tech/speed-up-docker-build-ci-environment/</link>
      <pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aniskhan001.me/tech/speed-up-docker-build-ci-environment/</guid>
      <description>&amp;quot;If you&amp;rsquo;re building Docker images on your laptop for tagging release, be in shame, and then change your behavior&amp;quot;‚Ää-‚ÄäKelsey Hightower, 2018
 That&amp;rsquo;s right! If you are building Docker images in your local machine, you are doing it wrong. We don&amp;rsquo;t want to build anything on our laptop. When we are tagging a new release for production, staging, or even for a dev environment, the build should trigger automatically to save time and avoid the hassle.</description>
    </item>
    
    <item>
      <title>How I reduced the size of a Docker image</title>
      <link>https://aniskhan001.me/tech/how-i-reduced-the-size-of-a-docker-image/</link>
      <pubDate>Sat, 09 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://aniskhan001.me/tech/how-i-reduced-the-size-of-a-docker-image/</guid>
      <description>December 2017, at work, I had to deploy a micro-service very very quickly to support the core service of ours. The framework I used for this one was Sanic, (a micro-framework written in Python 3.5 with Async support). So, I get the python image first along with dependencies in a requirements.txt file. This is how it went:
FROMpython:3.6ENV PYTHONUNBUFFERED 1ENV TZ=Asia/DhakaRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;amp;&amp;amp; echo $TZ &amp;gt; /etc/timezoneRUN mkdir /appADD requirements.</description>
    </item>
    
  </channel>
</rss>
